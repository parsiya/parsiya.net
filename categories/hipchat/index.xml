<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hipchat on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/hipchat/</link><description>Recent content in Hipchat on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 19 Oct 2015 21:42:10 +0000</lastBuildDate><atom:link href="https://parsiya.net/categories/hipchat/index.xml" rel="self" type="application/rss+xml"/><item><title>Proxying Hipchat Part 3: SSL Added and Removed Here :^)</title><link>https://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/</link><pubDate>Mon, 19 Oct 2015 21:42:10 +0000</pubDate><guid>https://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/</guid><description>&lt;p&gt;Finally we are at part 3 of proxying Hipchat. This has been quite the adventure. In &lt;a href="https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/" title="Proxying Hipchat Part 1: Where did the Traffic Go?"&gt;&lt;strong&gt;part1&lt;/strong&gt;&lt;/a&gt; we identified the endpoints. In &lt;a href="https://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/" title="Proxying Hipchat Part 2: So You Think You Can Use Burp?"&gt;&lt;strong&gt;part2&lt;/strong&gt;&lt;/a&gt; we answered the question “So you think you can use Burp” with yes and proxied some of Hipchat's traffic with Burp.&lt;/p&gt;
&lt;p&gt;In this part we will talk about developing our own proxy in Python to view Hipchat's traffic to/form &lt;code&gt;hipchatserver.com&lt;/code&gt; (our example Hipchat server). First we are going to discuss how proxies work and we will get over Burp breaking our heart by creating our own proxy in Python to observe and dump the traffic in plaintext.&lt;/p&gt;
&lt;p&gt;Related (crappy) code is at now in my clone at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/hipchat-proxy" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Parsia-Code/tree/master/hipchat-proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a similar effort (although with a much more complex proxy in &lt;code&gt;erlang&lt;/code&gt;) look at &lt;a href="http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/" target="_blank" rel="noreferrer noopener"&gt;http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Proxying Hipchat Part 2: So You Think You Can Use Burp?</title><link>https://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/</link><pubDate>Fri, 09 Oct 2015 22:34:37 +0000</pubDate><guid>https://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/</guid><description>&lt;p&gt;In &lt;a href="https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/" title="Proxying Hipchat Part 1: Where did the Traffic Go?"&gt;&lt;strong&gt;part1&lt;/strong&gt;&lt;/a&gt; I talked about identifying Hipchat endpoints and promised to discuss proxying the application. In this post I will show how to proxy &lt;em&gt;some&lt;/em&gt; of Hipchat's traffic using Burp.&lt;/p&gt;
&lt;p&gt;This is specific to Hipchat client for Windows. The current version at the time of writing was is &lt;strong&gt;2.2.1361&lt;/strong&gt;. Atlassian is skipping version 3 and version 4 still in beta.&lt;/p&gt;</description></item><item><title>Proxying Hipchat Part 1: Where did the Traffic Go?</title><link>https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/</link><pubDate>Thu, 08 Oct 2015 23:05:24 +0000</pubDate><guid>https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/</guid><description>&lt;p&gt;This is a slightly different version of a series of blog post that I wrote on our internal blog about proxying. I see that proxying traffic is a time consuming step in testing thick client applications so I thought I would share what I know. I tackled Hipchat. Why Hipchat? Because it uses a known protocol (XMPP) and I thought it's an interesting application.&lt;/p&gt;
&lt;p&gt;I used Hipchat Windows client version 2. At the time of writing version 4 is in beta. In this part we will see how we can identify endpoints from traffic captures even when they are behind a load balancer/shared hosting etc. In next parts we will start proxying.&lt;/p&gt;</description></item></channel></rss>