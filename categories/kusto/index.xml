<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kusto on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/kusto/</link><description>Recent content in Kusto on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 01 Sep 2025 20:00:00 -0700</lastBuildDate><atom:link href="https://parsiya.net/categories/kusto/index.xml" rel="self" type="application/rss+xml"/><item><title>Kusto Detective Agency: Echoes of Deception - 0-8 Solves</title><link>https://parsiya.net/blog/2025-kda-echoes/</link><pubDate>Mon, 01 Sep 2025 20:00:00 -0700</pubDate><guid>https://parsiya.net/blog/2025-kda-echoes/</guid><description>&lt;p&gt;Kusto is kinda important at my current employer and one of my work besties does
SecOps. So, I've decided to learn more Kusto. Solves for the first eight tasks
for Kusto Detective Agency challenge Echoes of Deception.&lt;/p&gt;
&lt;!-- More --&gt;
&lt;p&gt;It turns out Kusto is not just a better looking SQL, it does a lot more. E.g.,
it can make a graph and find paths (yes, as I've just searched, T-SQL can also
do this). It makes me wonder if we can do some esoteric data flow static
analysis by converting the AST into rows of data and finding paths from sources
to sinks (or am I reinventing CodeQL, again, lol &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;</description></item><item><title>Kusto-Mice: Optimizing Kusto joins</title><link>https://parsiya.net/blog/kusto-mice-join-optimization/</link><pubDate>Sun, 18 May 2025 14:52:43 -0700</pubDate><guid>https://parsiya.net/blog/kusto-mice-join-optimization/</guid><description>&lt;p&gt;A few weeks ago I wrestled with a complex Kusto query. I shared what I learned
at work in a presentation. In this blog, I'll use a public example to walk you
through it.&lt;/p&gt;</description></item></channel></rss>