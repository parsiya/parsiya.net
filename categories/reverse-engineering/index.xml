<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reverse Engineering on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/reverse-engineering/</link><description>Recent content in Reverse Engineering on Hackerman's Hacking Tutorials</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 17 Apr 2020 17:30:22 -0700</lastBuildDate><atom:link href="https://parsiya.net/categories/reverse-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>The Encrypted Logz - Some Simple Reverse Engineering</title><link>https://parsiya.net/blog/2020-04-17-the-encrypted-logz-some-simple-reverse-engineering/</link><pubDate>Fri, 17 Apr 2020 17:30:22 -0700</pubDate><guid>https://parsiya.net/blog/2020-04-17-the-encrypted-logz-some-simple-reverse-engineering/</guid><description>&lt;p>I was looking at an application (not related to my day job) and I decided to
reverse engineer how it creates logs. I cannot name the app (yet) but hopefully,
this is useful.&lt;/p></description></item><item><title>Old ContextIS Challenge Solutions</title><link>https://parsiya.net/blog/2020-02-09-old-contextis-challenge-solutions/</link><pubDate>Sun, 09 Feb 2020 19:08:07 -0800</pubDate><guid>https://parsiya.net/blog/2020-02-09-old-contextis-challenge-solutions/</guid><description>&lt;p>A few years ago I did the &lt;a href="https://www.contextis.com/en/" target="_blank" rel="noreferrer noopener">Context Information Security&lt;/a>
challenges. They used it for recruiting so I never published the results.
However, they have now switched to &lt;a href="https://www.hackthebox.eu/" target="_blank" rel="noreferrer noopener">Hack The Box&lt;/a> and the old
challenges are gone. So I am publishing what I did.&lt;/p>
&lt;p>You can see the page with the old challenges using the Wayback Machine at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://web.archive.org/web/20181012035146/https://www.contextis.com/en/careers/challenges" target="_blank" rel="noreferrer noopener">http://web.archive.org/web/20181012035146/https://www.contextis.com/en/careers/challenges&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I also did some of their &lt;a href="https://parsiya.net/blog/2018-06-05-contextis-xmas-ctf-writeup/" title="xmas 2018 challenges">xmas 2018 challenges&lt;/a>.&lt;/p></description></item><item><title>Disabling Burp's Update Screen - Part 1 - Analysis and Failures</title><link>https://parsiya.net/blog/2019-04-21-disabling-burps-update-screen-part-1-analysis-and-failures/</link><pubDate>Sun, 21 Apr 2019 14:58:50 -0700</pubDate><guid>https://parsiya.net/blog/2019-04-21-disabling-burps-update-screen-part-1-analysis-and-failures/</guid><description>&lt;p>I tried to disable Burp's update nag screen and failed. This blog post describes
the analysis and my effort to date.&lt;/p>
&lt;p>Hacky Workaround: Block outgoing requests to &lt;code>54.246.133.196&lt;/code> but this will
also, block installing extensions from the Burp app store.&lt;/p>
&lt;p>Part two (if there is one) will discuss more things that I tried and did not
work and/or what worked and how you can disable it.&lt;/p></description></item><item><title>SANS Holiday Hack Challenge 2018 Solutions</title><link>https://parsiya.net/blog/2019-01-15-sans-holiday-hack-challenge-2018-solutions/</link><pubDate>Tue, 15 Jan 2019 19:33:21 -0500</pubDate><guid>https://parsiya.net/blog/2019-01-15-sans-holiday-hack-challenge-2018-solutions/</guid><description>&lt;p>SANS Holiday hack challenge 2018 was fun. It was also the first one I tried. I liked the talks and that the challenges were accessible to most skill levels. I mean &lt;a href="https://abiondo.me/2019/01/02/exploiting-math-expm1-v8/" target="_blank" rel="noreferrer noopener">RCE through the -0 bug in v8 is great and all&lt;/a> but I want people to be able to have fun and learn new skills.&lt;/p>
&lt;p>If being a security consultant has taught me anything, it's that no one has time to read your 100 page report. So here are some quick solutions. I will post my notes from the YouTube videos in different posts.&lt;/p></description></item><item><title>DVTA - Part 5 - Client-side Storage and DLL Hijacking</title><link>https://parsiya.net/blog/2018-08-25-dvta-part-5-client-side-storage-and-dll-hijacking/</link><pubDate>Sat, 25 Aug 2018 13:49:10 -0400</pubDate><guid>https://parsiya.net/blog/2018-08-25-dvta-part-5-client-side-storage-and-dll-hijacking/</guid><description>&lt;p>Thick clients store ample information on the device. In this part, we are going to investigate DVTA to see what, how, and where it stores data. We are also going to do some basic DLL hijacking. Our tools are procmon, PowerSploit, and dnSpy.&lt;/p>
&lt;p>Previous parts are at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/" title="DVTA - Part 1 - Setup">DVTA - Part 1 - Setup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-07-21-dvta-part-2-cert-pinning-and-login-button/" title="DVTA - Part 2 - Cert Pinning and Login Button">DVTA - Part 2 - Cert Pinning and Login Button&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-07-30-dvta-part-3-network-recon/" title="DVTA - Part 3 - Network Recon">DVTA - Part 3 - Network Recon&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-08-02-dvta-part-4-traffic-tampering-with-dnspy/" title="DVTA - Part 4 - Traffic Tampering with dnSpy">DVTA - Part 4 - Traffic Tampering with dnSpy&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>DVTA - Part 4 - Traffic Tampering with dnSpy</title><link>https://parsiya.net/blog/2018-08-02-dvta-part-4-traffic-tampering-with-dnspy/</link><pubDate>Thu, 02 Aug 2018 19:41:54 -0400</pubDate><guid>https://parsiya.net/blog/2018-08-02-dvta-part-4-traffic-tampering-with-dnspy/</guid><description>&lt;p>After doing network recon in part three, it's time to do some traffic manipulation. We will learn how to capture and modify network traffic using dnSpy. This is much easier than trying to intercept and modify traffic after it's transmitted.&lt;/p>
&lt;p>Previous parts are at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/" title="DVTA - Part 1 - Setup">DVTA - Part 1 - Setup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-07-21-dvta-part-2-cert-pinning-and-login-button/" title="DVTA - Part 2 - Cert Pinning and Login Button">DVTA - Part 2 - Cert Pinning and Login Button&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-07-30-dvta-part-3-network-recon/" title="DVTA - Part 3 - Network Recon">DVTA - Part 3 - Network Recon&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>DVTA - Part 3 - Network Recon</title><link>https://parsiya.net/blog/2018-07-30-dvta-part-3-network-recon/</link><pubDate>Mon, 30 Jul 2018 00:35:57 -0400</pubDate><guid>https://parsiya.net/blog/2018-07-30-dvta-part-3-network-recon/</guid><description>&lt;p>In this part, we will focus on network traffic. More often than not, thick client applications have some sort of network connectivity. They talk to some server(s) to do things.&lt;/p>
&lt;p>Previous parts are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/" title="DVTA - Part 1 - Setup">DVTA - Part 1 - Setup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-07-21-dvta-part-2-cert-pinning-and-login-button/" title="DVTA - Part 2 - Cert Pinning and Login Button">DVTA - Part 2 - Cert Pinning and Login Button&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>DVTA - Part 2 - Cert Pinning and Login Button</title><link>https://parsiya.net/blog/2018-07-21-dvta-part-2-cert-pinning-and-login-button/</link><pubDate>Sat, 21 Jul 2018 01:38:50 -0400</pubDate><guid>https://parsiya.net/blog/2018-07-21-dvta-part-2-cert-pinning-and-login-button/</guid><description>&lt;p>After setting up the Damn Vulnerable Thick Client Application, we are now ready to hack it.&lt;/p>
&lt;p>In this section, we will bypass the certificate pinning, enable the login button, learn how to modify the code in dnSpy through writing C# code and get a quick intro to Common Intermediate Language (CIL).&lt;/p>
&lt;p>You can see previous parts here:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/" title="DVTA - Part 1 - Setup">Damn Vulnerable Thick Client Application - Part 1 - Setup&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>DVTA - Part 1 - Setup</title><link>https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/</link><pubDate>Sun, 15 Jul 2018 21:26:41 -0400</pubDate><guid>https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/</guid><description>&lt;p>I have written a lot about thick clients. However, I have not done more than a few practical examples that I can show my co-workers or anyone else asking questions. Recently, I came across the Damn Vulnerable Thick Client Application by SecVulture at &lt;a href="https://github.com/secvulture/dvta" target="_blank" rel="noreferrer noopener">https://github.com/secvulture/dvta&lt;/a>.&lt;/p>
&lt;p>I am not going to use the original version of the application. Someone has created a fork and added more protections. We will use this fork instead:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nddmars/dvta" target="_blank" rel="noreferrer noopener">https://github.com/nddmars/dvta&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Neither fork's setup instructions worked for me. As a result, the first part is actually setting up the application and the necessary back-end in only one VM. But don't worry, we will do a bit of reverse engineering with dnSpy to fix an issue.&lt;/p>
&lt;p>&lt;strong>Thanks to SecVulture for creating the app and maintainers of the second repository for adding protections.&lt;/strong>&lt;/p></description></item><item><title>ContextIS xmas CTF Writeup</title><link>https://parsiya.net/blog/2018-06-05-contextis-xmas-ctf-writeup/</link><pubDate>Tue, 05 Jun 2018 22:34:55 -0400</pubDate><guid>https://parsiya.net/blog/2018-06-05-contextis-xmas-ctf-writeup/</guid><description>&lt;p>In January 2018, &lt;a href="https://www.contextis.com/" target="_blank" rel="noreferrer noopener">Context Information Security&lt;/a> had a CTF. Here are my write-ups for some of them and write-ups for some I did not figure out. But that's CTF for you. If you manage to walk down the path of designer, you will be fine. Otherwise, you will have a bad time.&lt;/p>
&lt;p>But enough complaining, let's see what happens.&lt;/p></description></item><item><title>WinAppDbg - Part 4 - Bruteforcing FlareOn 2017 - Challenge 3</title><link>https://parsiya.net/blog/2017-11-15-winappdbg-part-4-bruteforcing-flareon-2017-challenge-3/</link><pubDate>Wed, 15 Nov 2017 18:45:04 -0500</pubDate><guid>https://parsiya.net/blog/2017-11-15-winappdbg-part-4-bruteforcing-flareon-2017-challenge-3/</guid><description>&lt;p>Previous parts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://parsiya.net/blog/2017-11-09-winappdbg-part-1-basics/" title="WinAppDbg - Part 1 - Basics">Part 1 - Basics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2017-11-11-winappdbg-part-2-function-hooking-and-others/" title="WinAppDbg - Part 2 - Function Hooking and Others">Part 2 - Function Hooking and Others&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2017-11-11-winappdbg-part-2-function-hooking-and-others/" title="WinAppDbg - Part 3 - Manipulating Function Calls">Part 3 - Manipulating Function Calls&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>We have learned some good stuff. In this part I am going to talk about the original problem that led me to learning WinAppDbg. This is my writeup for challenge 3 &amp;quot;Greek to me&amp;quot; of &lt;a href="https://www.fireeye.com/blog/threat-research/2017/10/2017-flare-on-challenge-solutions.html" target="_blank" rel="noreferrer noopener">FlareOn 2017&lt;/a>. This is a bruteforce challenge and is rather easy but instead of bruteforcing it the conventional (and straightforward way), I will show how I traversed arbitrary Assembly blobs using WinAppDbg.&lt;/p>
&lt;p>I will (hopefully) mostly talk about solving the challenge and not a lot of recon or other places I was stuck at.&lt;/p>
&lt;p>Code is in my clone:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/winappdbg" title="WinAppDbg code in Parsia-Code" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/winappdbg&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>WinAppDbg - Part 3 - Manipulating Function Calls</title><link>https://parsiya.net/blog/2017-11-15-winappdbg-part-3-manipulating-function-calls/</link><pubDate>Wed, 15 Nov 2017 00:30:25 -0500</pubDate><guid>https://parsiya.net/blog/2017-11-15-winappdbg-part-3-manipulating-function-calls/</guid><description>&lt;p>Previously on WinAppDbg-TV:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://parsiya.net/blog/2017-11-09-winappdbg-part-1-basics/" title="WinAppDbg - Part 1 - Basics">Part 1 - Basics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2017-11-11-winappdbg-part-2-function-hooking-and-others/" title="WinAppDbg - Part 2 - Function Hooking and Others">Part 2 - Function Hooking and Others&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>As usual, code is in my clone on Github. Download that directory to your VM and follow along:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/winappdbg" title="WinAppDbg code in Parsia-Code" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/winappdbg&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In part two we learned how to hook functions by hooking IE and Firefox to see pre-TLS traffic. Just looking at function calls is fun but often not enough. We need to be able to modify function parameters and return values.&lt;/p>
&lt;p>In this part we will learn how to do that (and a few other things). We will start with something simple and then move on to more complex examples.&lt;/p></description></item><item><title>WinAppDbg - Part 2 - Function Hooking and Others</title><link>https://parsiya.net/blog/2017-11-11-winappdbg-part-2-function-hooking-and-others/</link><pubDate>Sat, 11 Nov 2017 12:04:48 -0500</pubDate><guid>https://parsiya.net/blog/2017-11-11-winappdbg-part-2-function-hooking-and-others/</guid><description>&lt;p>In &lt;a href="https://parsiya.net/blog/2017-11-09-winappdbg-part-1-basics/" title="WinAppDbg - Part 1 - Basics">part one&lt;/a> we talked about the basics of WinAppDbg. In this part we are going to learn a few new things:&lt;/p>
&lt;ul>
&lt;li>I wrote a &lt;a href="https://github.com/parsiya/WinAppUtil" title="WinAppDbg repository on Github" target="_blank" rel="noreferrer noopener">simple python module&lt;/a> to simplify my use of WinAppDbg. It will most likely be modified later, but I have included a version that works with the tutorials at:
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/winappdbg" title="WinAppDbg code in Parsia-Code" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/winappdbg&lt;/a>&lt;/li>
&lt;li>We do not need to type the full filename anymore if the executable is in PATH. Note Run Line (&lt;code>win+r&lt;/code>) pulls stuff from more locations than PATH, so we cannot call &lt;code>chrome.exe&lt;/code>. I have written about it &lt;a href="https://parsiya.net/blog/2017-10-23-run-line-vs.-cmd-vs.-powershell/" title="Run Line vs. cmd vs. PowerShell">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>DLL enumeration&lt;/strong>: We're going to implement one of procmon's features.&lt;/li>
&lt;li>&lt;strong>Process/Thread tracing&lt;/strong>: Another procmon feature.&lt;/li>
&lt;li>&lt;strong>Function Hooking&lt;/strong>: It's very easy in WinAppDbg and we will learn how to do it a couple of different ways.
&lt;ul>
&lt;li>We will hook pre-TLS encryption data for Internet Explorer and Firefox to hack the Gibson.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Copy this directory &lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/winappdbg" title="WinAppDbg code in Parsia-Code" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/winappdbg&lt;/a> to your VM and let's go.&lt;/p></description></item><item><title>WinAppDbg - Part 1 - Basics</title><link>https://parsiya.net/blog/2017-11-09-winappdbg-part-1-basics/</link><pubDate>Thu, 09 Nov 2017 19:22:24 -0500</pubDate><guid>https://parsiya.net/blog/2017-11-09-winappdbg-part-1-basics/</guid><description>&lt;p>&lt;a href="https://github.com/MarioVilas/winappdbg" title="WinAppDbg repository on Github" target="_blank" rel="noreferrer noopener">WinAppDbg&lt;/a> by &lt;a href="https://twitter.com/Mario_Vilas" title="Mario Vilas Twitter account" target="_blank" rel="noreferrer noopener">Mario Vilas&lt;/a> is perhaps one of the most underrated instrumentation frameworks for Windows. In this day and age where everyone write JavaScript code to hook functions (I am looking at you Frida), writing Python code feels great. Just kidding, Frida is pretty cool too.&lt;/p>
&lt;p>Going around the web searching for tutorials did not give me many results. &lt;a href="https://winappdbg.readthedocs.io/en/latest/" title="WinAppDbg documentation on readthedocs" target="_blank" rel="noreferrer noopener">The docs&lt;/a> are great, they are some of the most practical docs I have seen. But apart from that, I could not find much. There are some random code here and there where people have documented using it but there were no guides to get me started apart from the docs.&lt;/p>
&lt;p>Here's the result of my learning. I am sharing it to fill the gap that I encountered while getting started with the tool. We're going to learn as we go using real-world applications and will write code. We will start from the basics, expanding our code-base as we learn more.&lt;/p>
&lt;p>Code is in my clone at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/winappdbg" title="WinAppDbg code in Parsia-Code" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/winappdbg&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Gynvael Coldwind - Garage4Hackers - Notes from March 2014</title><link>https://parsiya.net/blog/2016-07-14-gynvael-coldwind-garage4hackers-notes-from-march-2014/</link><pubDate>Thu, 14 Jul 2016 23:03:51 -0400</pubDate><guid>https://parsiya.net/blog/2016-07-14-gynvael-coldwind-garage4hackers-notes-from-march-2014/</guid><description>&lt;p>Back in March 2014, Garage4Hackers had a live stream with Gynvael Coldwind. His talk was named &lt;code>&amp;quot;Data, data, data! I can't make bricks without clay&amp;quot;&lt;/code> or &lt;code>a few practical notes on reverse-engineering&lt;/code>. You can see the recording &lt;a href="https://www.youtube.com/watch?v=Jk5Yad598vs" target="_blank" rel="noreferrer noopener">on youtube&lt;/a>.&lt;/p>
&lt;p>Here are my notes that I discovered from 2014.&lt;/p></description></item><item><title>Intro to .NET Remoting for Hackers</title><link>https://parsiya.net/blog/2015-11-14-intro-to-.net-remoting-for-hackers/</link><pubDate>Sat, 14 Nov 2015 16:22:36 +0000</pubDate><guid>https://parsiya.net/blog/2015-11-14-intro-to-.net-remoting-for-hackers/</guid><description>&lt;p>This is a simple tutorial about &lt;a href="https://msdn.microsoft.com/en-us/library/kwdt6w2k%28v=vs.71%29.aspx" target="_blank" rel="noreferrer noopener">.NET Remoting&lt;/a>. I am going to re-create a very simple RCE and local privilege escalation that I encountered in my projects and use it to explain .NET Remoting and simple debugging in &lt;code>dnSpy&lt;/code>.&lt;/p>
&lt;p>In this post we will:&lt;/p>
&lt;ol>
&lt;li>Do a brief introduction to .NET Remoting&lt;/li>
&lt;li>Develop a simple .NET Remoting client and a vulnerable server in Visual Studio&lt;/li>
&lt;li>Observe .NET Remoting traffic&lt;/li>
&lt;li>See .NET Remoting in action by doing some basic debugging with dnSpy&lt;/li>
&lt;li>Re-create the vulnerable application&lt;/li>
&lt;li>Use dnSpy to patch and create modified .NET modules to exploit our sample vulnerable server&lt;/li>
&lt;/ol>
&lt;p>If you know of any applications that use .NET Remoting please let me know. I want to look at them.&lt;/p>
&lt;p>Code is at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/net-remoting" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/net-remoting&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Tales from the Crypt(o) - Leaking AES Keys</title><link>https://parsiya.net/blog/2015-01-06-tales-from-the-crypto-leaking-aes-keys/</link><pubDate>Tue, 06 Jan 2015 23:36:48 +0000</pubDate><guid>https://parsiya.net/blog/2015-01-06-tales-from-the-crypto-leaking-aes-keys/</guid><description>&lt;p>This post is part one of a two part internal blog entry on creating a Pintool for an assessment. Unfortunately I cannot talk about it, so I decided to put the first part out. If I find an opensource program similar to the assessment I will try and recreate the tool (but I am not holding my breath). As this part is essentially a build up, it may not be coherent at times. Alteratively, if you really want to read it, you can join us. We are almost always hiring (let me do the referral though ;).&lt;/p>
&lt;p>Today we are going to talk about discovering encryption keys in sneaky ways. We will start with simple examples, do a bit of Digital Forensics or DF (for low standards of DF) and finally in part two we will use our recently acquired knowledge of Pintool to do &lt;code>[redacted]&lt;/code>.&lt;/p>
&lt;p>First let's talk a bit about the inner-workings of AES decryption. By inner-workings of AES I do not mean the following diagrams that you have seen so many times.&lt;/p></description></item><item><title>Pin Adventures - Chapter 1 - PinSolver Mk1</title><link>https://parsiya.net/blog/2014-12-08-pin-adventures-chapter-1-pinsolver-mk1/</link><pubDate>Mon, 08 Dec 2014 20:46:59 +0000</pubDate><guid>https://parsiya.net/blog/2014-12-08-pin-adventures-chapter-1-pinsolver-mk1/</guid><description>&lt;p>While writing the writeups for the &lt;a href="http://parsiya.net/blog/2014-10-07-my-adventure-with-fireeye-flare-challenge/#ch6" target="_blank" rel="noreferrer noopener">Flare On Challenge 6&lt;/a> I came upon &lt;a href="http://gaasedelen.blogspot.com/2014/09/solving-fireeyes-flare-on-six-via-side.html" target="_blank" rel="noreferrer noopener">an alternative solution&lt;/a> by &lt;a href="https://twitter.com/gaasedelen" target="_blank" rel="noreferrer noopener">@gaasedelen&lt;/a> to use the number of executed instructions as a side-channel. Recently during an engagement I used &lt;a href="https://software.intel.com/en-us/articles/pintool" target="_blank" rel="noreferrer noopener">Pintool&lt;/a> to do &lt;code>[redacted]&lt;/code>. Now that I have a bit of time, I decided to use the idea to write such a tool.&lt;/p>
&lt;p>As an example, we will use a C program that checks input for a hardcoded value using &lt;code>strncmp&lt;/code>. We want to see if it's vulnerable to this side-channel (number of executed instructions).&lt;/p></description></item><item><title>My Adventure with Fireeye FLARE Challenge</title><link>https://parsiya.net/blog/2014-09-23-my-adventure-with-fireeye-flare-challenge/</link><pubDate>Tue, 23 Sep 2014 02:31:44 +0000</pubDate><guid>https://parsiya.net/blog/2014-09-23-my-adventure-with-fireeye-flare-challenge/</guid><description>&lt;p>These are my (rather long) solutions to Fireeye's FLARE challenge. This is just not the solution but other ways that I tried. This was a great learning experience for me so I am writing this post to document everything I tried. As a result, this post is somewhat long.&lt;/p>
&lt;p>If you have any feedback, please let me know. I spent a lot of time on this writeup and I am always happy to learn new stuff. My email and twitter handle are in the sidebar.&lt;/p>
&lt;p>I am a bit late to the party. There &lt;del>were two&lt;/del> are now other three solutions posted (that I know of). Check them out.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.codeandsec.com/Detailed-Solutions-to-FireEye-FLARE-Challenge" target="_blank" rel="noreferrer noopener">Detailed Solutions to FireEye FLARE Challenge&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ghettoforensics.com/2014/09/a-walkthrough-for-flare-re-challenges.html" target="_blank" rel="noreferrer noopener">A Walk through for FLARE RE Challenges&lt;/a>&lt;/li>
&lt;li>The FLARE On Challenge Solutions by Fireye
&lt;ul>
&lt;li>&lt;a href="http://www.fireeye.com/blog/technical/cyber-exploits/2014/11/the-flare-on-challenge-solutions-part-1-of-2.html" target="_blank" rel="noreferrer noopener">Part 1 - solutions for challenges 1 to 5&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.fireeye.com/blog/threat-research/2014/11/flare_on_challengep.html" target="_blank" rel="noreferrer noopener">Part 2 - solutions for challenges 6 and 7&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Fireeye's FLARE Challenge</title><link>https://parsiya.net/blog/2014-09-02-fireeyes-flare-challenge/</link><pubDate>Tue, 02 Sep 2014 00:34:00 +0000</pubDate><guid>https://parsiya.net/blog/2014-09-02-fireeyes-flare-challenge/</guid><description>It's been a while. I know I should have updated more frequently but lazyness prevails.
Anyway, I was busy doing Fireeye's FlARE challenges for a month or so (it was depressing to see people finish in 10 hours :). You can find the challenges at http://flare-on.com. I learned a lot doing them. They will release solutions in 2 weeks. I am also working on a writeup which I will release then.</description></item><item><title>Microsoft Bluehat Challenges</title><link>https://parsiya.net/blog/2013-09-29-microsoft-bluehat-challenges/</link><pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate><guid>https://parsiya.net/blog/2013-09-29-microsoft-bluehat-challenges/</guid><description>Microsoft has released their Bluehat challenges. You answer the challenge, send it out and if correct they will send the next level (at least that is what they say).
There are three categories: Reverse Engineering, Web and Vulnerabilities.
The first Reverse Engineering challenge was quite easy. But it was level 1 and I do not expect anti-debugging techniques. Let's see about the next level.
Anyway, Enjoy. Linkie.</description></item></channel></rss>