<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>thick client proxying on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/thick-client-proxying/</link><description>Recent content in thick client proxying on Hackerman's Hacking Tutorials</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jun 2020 09:49:35 -0700</lastBuildDate><atom:link href="https://parsiya.net/categories/thick-client-proxying/index.xml" rel="self" type="application/rss+xml"/><item><title>Thick Client Proxying - Part 11 - GOG Galaxy and Extract-SNI</title><link>https://parsiya.net/blog/2020-06-22-thick-client-proxying-part-11-gog-galaxy-and-extract-sni/</link><pubDate>Mon, 22 Jun 2020 09:49:35 -0700</pubDate><guid>https://parsiya.net/blog/2020-06-22-thick-client-proxying-part-11-gog-galaxy-and-extract-sni/</guid><description>&lt;p>In this post we will use our knowledge from
&lt;a href="https://parsiya.net/blog/2020-05-09-thick-client-proxying-part-10-the-hosts-file/" title="Thick Client Proxying - Part 10 - The hosts File" rel="nofollow" target="_blank">Thick Client Proxying - Part 10 - The hosts File&lt;/a>
to proxy GOG Galaxy 2. I will also introduce
&lt;a href="https://github.com/parsiya/extract-sni" target="_blank" rel="noreferrer noopener">some automation&lt;/a> to make our lives easier.&lt;/p></description></item><item><title>Thick Client Proxying - Part 10 - The hosts File</title><link>https://parsiya.net/blog/2020-05-09-thick-client-proxying-part-10-the-hosts-file/</link><pubDate>Sat, 09 May 2020 13:01:59 -0700</pubDate><guid>https://parsiya.net/blog/2020-05-09-thick-client-proxying-part-10-the-hosts-file/</guid><description>&lt;p>Welcome to the 10th installment of
&lt;a href="https://parsiya.net/categories/thick-client-proxying/" title="Thick Client Proxying">Thick Client Proxying&lt;/a>.
A series running since 2016. Woot! Today I will talk about traffic redirection
using the &lt;code>hosts&lt;/code> file.&lt;/p></description></item><item><title>Thick Client Proxying - Part 9 - The Windows DNS Cache</title><link>https://parsiya.net/blog/2019-04-28-thick-client-proxying-part-9-the-windows-dns-cache/</link><pubDate>Sun, 28 Apr 2019 13:35:00 -0700</pubDate><guid>https://parsiya.net/blog/2019-04-28-thick-client-proxying-part-9-the-windows-dns-cache/</guid><description>&lt;p>This post explains a trick that I have been using for a few years to discover
application endpoints on Windows quickly.&lt;/p>
&lt;p>It's a simple trick:&lt;/p>
&lt;ol>
&lt;li>Clear the DNS cache.&lt;/li>
&lt;li>Take a snapshot of the cache.&lt;/li>
&lt;li>Run the application and use different functionalities.&lt;/li>
&lt;li>Take another snapshot of the cache.&lt;/li>
&lt;li>Compare these two snapshots.&lt;/li>
&lt;li>???&lt;/li>
&lt;li>Discover (most) endpoints.&lt;/li>
&lt;/ol>
&lt;p>Code is at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/dns-cache" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/dns-cache&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Disabling Burp's Update Screen - Part 1 - Analysis and Failures</title><link>https://parsiya.net/blog/2019-04-21-disabling-burps-update-screen-part-1-analysis-and-failures/</link><pubDate>Sun, 21 Apr 2019 14:58:50 -0700</pubDate><guid>https://parsiya.net/blog/2019-04-21-disabling-burps-update-screen-part-1-analysis-and-failures/</guid><description>&lt;p>I tried to disable Burp's update nag screen and failed. This blog post describes
the analysis and my effort to date.&lt;/p>
&lt;p>Hacky Workaround: Block outgoing requests to &lt;code>54.246.133.196&lt;/code> but this will
also, block installing extensions from the Burp app store.&lt;/p>
&lt;p>Part two (if there is one) will discuss more things that I tried and did not
work and/or what worked and how you can disable it.&lt;/p></description></item><item><title>Thick Client Proxying - Part 8 - Notes on Proxying Windows Services</title><link>https://parsiya.net/blog/2017-10-08-thick-client-proxying-part-8-notes-on-proxying-windows-services/</link><pubDate>Sun, 08 Oct 2017 15:00:00 -0400</pubDate><guid>https://parsiya.net/blog/2017-10-08-thick-client-proxying-part-8-notes-on-proxying-windows-services/</guid><description>&lt;p>These are my notes about proxying Windows services. Being run from a different account (usually LocalSystem).&lt;/p>
&lt;p>Proxy settings are usually configured per user and are not applicable to Windows services.&lt;/p>
&lt;p>If you have to proxy a Windows service, here are some of the things you can try (and hope they work).&lt;/p>
&lt;p>There are also some issues when using &lt;code>netsh&lt;/code> to set WinHTTP proxies for 32-bit applications on Windows 7 64-bit.&lt;/p></description></item><item><title>Thick Client Proxying - Part 7 - Proxying .NET Applications via Config File</title><link>https://parsiya.net/blog/2017-10-07-thick-client-proxying-part-7-proxying-.net-applications-via-config-file/</link><pubDate>Sat, 07 Oct 2017 18:30:28 -0400</pubDate><guid>https://parsiya.net/blog/2017-10-07-thick-client-proxying-part-7-proxying-.net-applications-via-config-file/</guid><description>&lt;p>.NET applications use a configuration file to read some settings. It's an XML
file named &lt;code>appName.exe.config&lt;/code>. We can pass a proxy address in this file.&lt;/p>
&lt;p>These apps usually use WinINET or IE proxy settings. Sometimes, they do not. We
can either use an application specific config file or use one for the entire
.NET framework for a machine.&lt;/p>
&lt;p>Look inside the decompiled code (or just grep the binary files) for references
to &lt;code>System.Configuration&lt;/code> &lt;a href="https://msdn.microsoft.com/en-us/library/system.configuration.configuration%28v=vs.110%29.aspx" target="_blank" rel="noreferrer noopener">MSDN-page&lt;/a>. Applications
use &lt;code>ConfigurationManager&lt;/code> and &lt;code>WebConfigurationManager&lt;/code> classes to access these
settings.&lt;/p>
&lt;!-- links --></description></item><item><title>Razer Comms</title><link>https://parsiya.net/blog/2017-09-21-razer-comms/</link><pubDate>Thu, 21 Sep 2017 22:45:20 -0400</pubDate><guid>https://parsiya.net/blog/2017-09-21-razer-comms/</guid><description>&lt;p>A couple of years ago I looked at Razer Comms. I found a bunch of stuff that I never reported or pursued. I discovered the application is &lt;a href="http://support.razerzone.com/software/comms" target="_blank" rel="noreferrer noopener">now retired&lt;/a> so I am publishing these.&lt;/p>
&lt;p>I did not look very hard but Razer Comms was essentially a webapp running via the &lt;a href="https://bitbucket.org/chromiumembedded/cef" target="_blank" rel="noreferrer noopener">Chromium Embedded Framework&lt;/a>. There were no checks on channel authorizations. You could read every channel including ones protected with passwords.&lt;/p>
&lt;p>You can see my notes at &lt;a href="https://github.com/parsiya/Parsia-Clone/tree/master/research/razer-comms" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Clone/tree/master/research/razer-comms&lt;/a>.&lt;/p></description></item><item><title>Thick Client Proxying - Part 6: How HTTP(s) Proxies Work</title><link>https://parsiya.net/blog/2016-07-28-thick-client-proxying-part-6-how-https-proxies-work/</link><pubDate>Thu, 28 Jul 2016 02:04:23 -0400</pubDate><guid>https://parsiya.net/blog/2016-07-28-thick-client-proxying-part-6-how-https-proxies-work/</guid><description>&lt;p>In order to create our own custom proxies, first we need to know how proxies work. When I wanted to write a custom proxy tool (it's a simple Python script) in &lt;a href="https://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/" title="Proxying Hipchat Part 3: SSL Added and Removed Here">Hipchat part3&lt;/a>, I had to go back and learn how they work. I did not find such a resource online that looked at proxies from an infosec perspective. Most talked about how to configure caching or forwarding proxies and not much about MitM ones. I have briefly talked about it in the section 2 of the same post named &lt;code>How does a Proxy Work?&lt;/code>. In this post I am going to take a deep(er) dive. I actually read some RFCs and they were surprisingly well written.&lt;/p>
&lt;p>If you want to skip the intro, go to &lt;a href="#section-3" title="How HTTP Proxies Work">section 3&lt;/a>.&lt;/p></description></item><item><title>Windows Netsh Interface Portproxy</title><link>https://parsiya.net/blog/2016-06-07-windows-netsh-interface-portproxy/</link><pubDate>Tue, 07 Jun 2016 22:29:49 -0400</pubDate><guid>https://parsiya.net/blog/2016-06-07-windows-netsh-interface-portproxy/</guid><description>&lt;p>I thought I had found the Windows &lt;code>iptables&lt;/code> with &lt;a href="https://technet.microsoft.com/de-de/library/cc731068%28v=ws.10%29.aspx" target="_blank" rel="noreferrer noopener">Portproxy&lt;/a>
but I was wrong. But I learned something neat in the process and I am
documenting it.&lt;/p>
&lt;p>Portproxy allows you to listen on a certain port on one of your network
interfaces (or all interfaces) and redirect all traffic
&lt;strong>destined to that interface&lt;/strong> to another port/IP.&lt;/p>
&lt;p>The &lt;code>to that interface&lt;/code> is the limitation that unfortunately kills it. This will
be a short post.&lt;/p></description></item><item><title>Thick Client Proxying - Part 5: FileHippo App Manager or the Bloated Hippo</title><link>https://parsiya.net/blog/2016-05-15-thick-client-proxying-part-5-filehippo-app-manager-or-the-bloated-hippo/</link><pubDate>Sun, 15 May 2016 16:55:24 -0400</pubDate><guid>https://parsiya.net/blog/2016-05-15-thick-client-proxying-part-5-filehippo-app-manager-or-the-bloated-hippo/</guid><description>&lt;p>I have talked a lot about this and that but have done nothing in action. Now I will talk about proxying actual applications. I will start with something easy, the &lt;a href="http://filehippo.com/download_app_manager/" target="_blank" rel="noreferrer noopener">FileHippo App Manager&lt;/a>. This app was chosen because it can be proxied with Burp, it does not use TLS and it has its own proxy settings (also works with Internet Explorer proxy settings). The requests are pretty simple to understand. I like the FileHippo website because it archives old versions of software. For example I loved the non-bloated Yahoo! Messenger 8.0 when I used it (it's pretty popular in some places) and used FileHippo to download the old versions.&lt;/p>
&lt;p>FileHippo App Manager turned out to be more interesting than I thought and this post turned into some .NET reverse engineering using dnSpy. Here's what I talk about in this post:&lt;/p>
&lt;ul>
&lt;li>The app contains the AWS SDK and a fortunately invalid set of AWS Access/Secret keys. Both the SDK and the keys are in dead code.&lt;/li>
&lt;li>Requests have an &lt;code>AccessToken&lt;/code> header which is generated client-side. We will discuss how it is generated.&lt;/li>
&lt;li>The application has a &amp;quot;hidden&amp;quot; DEBUG mode which unfortunately does nothing special. We will discover how to enable it.&lt;/li>
&lt;/ul></description></item><item><title>Thick Client Proxying - Part 4: Burp in Proxy Chains</title><link>https://parsiya.net/blog/2016-04-07-thick-client-proxying-part-4-burp-in-proxy-chains/</link><pubDate>Thu, 07 Apr 2016 21:17:25 -0400</pubDate><guid>https://parsiya.net/blog/2016-04-07-thick-client-proxying-part-4-burp-in-proxy-chains/</guid><description>&lt;p>In this post I will talk about using Burp as part of a proxy chain. The number of applications that can be proxied by Burp and used with Burp in proxy chains is &lt;em>infinite&lt;/em> for documentation purposes. Instead I am going to demonstrate how to use some of more used tools with Burp in proxy chain. All of this is going to happen on a Windows 7 Virtual Machine (VM).&lt;/p>
&lt;p>These applications/utilities are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cygwin.com/" target="_blank" rel="noreferrer noopener">Cygwin&lt;/a>: I will use cURL commands for demonstration purposes.&lt;/li>
&lt;li>IBM Appscan Standard: I will use the evaluation version.&lt;/li>
&lt;li>&lt;a href="https://www.charlesproxy.com/download/latest-release/" target="_blank" rel="noreferrer noopener">Charles Proxy&lt;/a>: For when you have to use multiple proxies.&lt;/li>
&lt;li>&lt;a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noreferrer noopener">Fiddler&lt;/a>: Same as above.&lt;/li>
&lt;li>&lt;a href="https://www.soapui.org/downloads/soapui.html" target="_blank" rel="noreferrer noopener">SoapUI&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>You don't need Burp Pro to play along and apart from Appscan, all application are free to use. For Appscan we will use the evaluation version which is free for its demo test.&lt;/p></description></item><item><title>Thick Client Proxying - Part 3: Burp Options and Extender</title><link>https://parsiya.net/blog/2016-04-02-thick-client-proxying-part-3-burp-options-and-extender/</link><pubDate>Sat, 02 Apr 2016 20:22:37 -0400</pubDate><guid>https://parsiya.net/blog/2016-04-02-thick-client-proxying-part-3-burp-options-and-extender/</guid><description>&lt;p>Previous parts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://parsiya.net/blog/2016-03-27-thick-client-proxying-part-1-burp-interception-and-proxy-listeners/" title="Burp Tips and Tricks for Non-Webapp Testing - Part 1: Interception and Proxy Listeners">Burp Tips and Tricks for Non-Webapp Testing - Part 1: Interception and Proxy Listeners&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2016-03-29-thick-client-proxying-part-2-burp-history-intruder-scanner-and-more/" title="Burp Tips and Tricks for Non-Webapp Testing - Part 2: History, Intruder, Scanner and More">Burp Tips and Tricks for Non-Webapp Testing - Part 2: History, Intruder, Scanner and More&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Almost there, I will get through &lt;code>Options&lt;/code> and &lt;code>Extender&lt;/code> in this part and we will actually start doing stuff moving forward.&lt;/p></description></item><item><title>Thick Client Proxying - Part 2: Burp History, Intruder, Scanner and More</title><link>https://parsiya.net/blog/2016-03-29-thick-client-proxying-part-2-burp-history-intruder-scanner-and-more/</link><pubDate>Tue, 29 Mar 2016 19:57:53 -0400</pubDate><guid>https://parsiya.net/blog/2016-03-29-thick-client-proxying-part-2-burp-history-intruder-scanner-and-more/</guid><description>&lt;p>In &lt;a href="https://parsiya.net/blog/2016-03-27-thick-client-proxying-part-1-burp-interception-and-proxy-listeners/" title="Burp Tips and Tricks for Non-Webapp Testing - Part 1: Interception and Proxy Listeners">part1&lt;/a> I talked about some of Burp's functionalities with regards to testing non-webapps. I did not expect it to be that long, originally I had intended to just shared some quick tips that I use. Now you are forced to read my drivel.&lt;/p>
&lt;p>In this part I will talk about &lt;code>Target &amp;gt; Scope&lt;/code>, &lt;code>Proxy &amp;gt; HTTP History&lt;/code> and &lt;code>Intruder/Scanner&lt;/code>. I will discuss a bit of &lt;code>Scanner&lt;/code>, &lt;code>Repeater&lt;/code> and &lt;code>Comparer&lt;/code> too, but there is not much to discuss for the last three. They are pretty straightforward.&lt;/p></description></item><item><title>Thick Client Proxying - Part 1: Burp Interception and Proxy Listeners</title><link>https://parsiya.net/blog/2016-03-27-thick-client-proxying-part-1-burp-interception-and-proxy-listeners/</link><pubDate>Sun, 27 Mar 2016 02:45:03 -0400</pubDate><guid>https://parsiya.net/blog/2016-03-27-thick-client-proxying-part-1-burp-interception-and-proxy-listeners/</guid><description>&lt;p>Burp is not just used for web application testing. I usually use it during mobile and thick client tests. If the application is using HTTP methods then Burp is your best friend.&lt;/p>
&lt;p>I am going to document a bunch of Burp tips and tricks that have helped me during my work. One purpose is to share it with the world and not be the other guy from Wham! (:D) and the other is to have it in an accessible place (similar to the cheat sheet in the menu).&lt;/p>
&lt;p>This part one I talk about Interception and Proxy listeners which are configured via &lt;code>Proxy &amp;gt; Options&lt;/code>.&lt;/p>
&lt;p>At the time of writing the current version of Burp Pro is &lt;code>1.6.39&lt;/code> and most items should apply to the current Burp Free version (&lt;code>1.6.32&lt;/code>). Most settings have not changed since I started working with Burp (v1.5). You can download Burp from: &lt;a href="https://portswigger.net/burp/download.html" target="_blank" rel="noreferrer noopener">https://portswigger.net/burp/download.html&lt;/a>.&lt;/p>
&lt;p>When I started this, I did not think I have so much stuff to write about Burp. So I broke it into multiple parts. Please note that these series of posts are not targeted towards web application testing so I have skipped some functionalities. If you have any favorite tips or usecases and want them included with credit please let me know, as usual feedback is always welcome.&lt;/p></description></item><item><title>Proxying Hipchat Part 3: SSL Added and Removed Here :^)</title><link>https://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/</link><pubDate>Mon, 19 Oct 2015 21:42:10 +0000</pubDate><guid>https://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/</guid><description>&lt;p>Finally we are at part 3 of proxying Hipchat. This has been quite the adventure. In &lt;a href="https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/" title="Proxying Hipchat Part 1: Where did the Traffic Go?">&lt;strong>part1&lt;/strong>&lt;/a> we identified the endpoints. In &lt;a href="https://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/" title="Proxying Hipchat Part 2: So You Think You Can Use Burp?">&lt;strong>part2&lt;/strong>&lt;/a> we answered the question “So you think you can use Burp” with yes and proxied some of Hipchat's traffic with Burp.&lt;/p>
&lt;p>In this part we will talk about developing our own proxy in Python to view Hipchat's traffic to/form &lt;code>hipchatserver.com&lt;/code> (our example Hipchat server). First we are going to discuss how proxies work and we will get over Burp breaking our heart by creating our own proxy in Python to observe and dump the traffic in plaintext.&lt;/p>
&lt;p>Related (crappy) code is at now in my clone at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/hipchat-proxy" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/hipchat-proxy&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For a similar effort (although with a much more complex proxy in &lt;code>erlang&lt;/code>) look at &lt;a href="http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/" target="_blank" rel="noreferrer noopener">http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/&lt;/a>.&lt;/p></description></item><item><title>Proxying Hipchat Part 2: So You Think You Can Use Burp?</title><link>https://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/</link><pubDate>Fri, 09 Oct 2015 22:34:37 +0000</pubDate><guid>https://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/</guid><description>&lt;p>In &lt;a href="https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/" title="Proxying Hipchat Part 1: Where did the Traffic Go?">&lt;strong>part1&lt;/strong>&lt;/a> I talked about identifying Hipchat endpoints and promised to discuss proxying the application. In this post I will show how to proxy &lt;em>some&lt;/em> of Hipchat's traffic using Burp.&lt;/p>
&lt;p>This is specific to Hipchat client for Windows. The current version at the time of writing was is &lt;strong>2.2.1361&lt;/strong>. Atlassian is skipping version 3 and version 4 still in beta.&lt;/p></description></item><item><title>Proxying Hipchat Part 1: Where did the Traffic Go?</title><link>https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/</link><pubDate>Thu, 08 Oct 2015 23:05:24 +0000</pubDate><guid>https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/</guid><description>&lt;p>This is a slightly different version of a series of blog post that I wrote on our internal blog about proxying. I see that proxying traffic is a time consuming step in testing thick client applications so I thought I would share what I know. I tackled Hipchat. Why Hipchat? Because it uses a known protocol (XMPP) and I thought it's an interesting application.&lt;/p>
&lt;p>I used Hipchat Windows client version 2. At the time of writing version 4 is in beta. In this part we will see how we can identify endpoints from traffic captures even when they are behind a load balancer/shared hosting etc. In next parts we will start proxying.&lt;/p></description></item><item><title>Network Traffic Attribution on Windows</title><link>https://parsiya.net/blog/2015-08-01-network-traffic-attribution-on-windows/</link><pubDate>Sat, 01 Aug 2015 19:37:42 +0000</pubDate><guid>https://parsiya.net/blog/2015-08-01-network-traffic-attribution-on-windows/</guid><description>&lt;p>Thick client assessments come in different flavors. Most of our work is on
&lt;code>consumer applications&lt;/code> where &lt;code>consumer&lt;/code> means either the customer or an
employee of our client. But these applications usually have network
communications.&lt;/p>
&lt;p>When looking at thick client applications from a network traffic perspective, we
face two big challenges:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Traffic Attribution&lt;/strong> or &lt;strong>Where does this traffic come from?&lt;/strong>: How to we
identify application's traffic? The operating system (in this case Windows)
is running many applications and services. Each of them may have network
connectivity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Proxying Traffic&lt;/strong> or &lt;strong>How do I look view/modify traffic?&lt;/strong>: This is more
challenging and involves capturing, modifying and in a lot of cases
decrypting/decoding target application's traffic. This could be as easy as
setting up Burp via an application setting (EZ-mode) or as hard as setting up
your own access point to capture a device's traffic then developing your own
decryption plugin for your proxy tool (good luck).&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>In this post, I will be talking about the much easier first challenge. I will be
talking about some of the tools and techniques that I use to accomplish this.
This is not a groundbreaking post ;). We will use a simple application, in this
case &lt;code>notepad++&lt;/code>.&lt;/p></description></item></channel></rss>