<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Crypto on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/crypto/</link><description>Recent content in Crypto on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 17 Apr 2020 17:30:22 -0700</lastBuildDate><atom:link href="https://parsiya.net/categories/crypto/index.xml" rel="self" type="application/rss+xml"/><item><title>The Encrypted Logz - Some Simple Reverse Engineering</title><link>https://parsiya.net/blog/2020-04-17-the-encrypted-logz-some-simple-reverse-engineering/</link><pubDate>Fri, 17 Apr 2020 17:30:22 -0700</pubDate><guid>https://parsiya.net/blog/2020-04-17-the-encrypted-logz-some-simple-reverse-engineering/</guid><description>&lt;p&gt;I was looking at an application (not related to my day job) and I decided to
reverse engineer how it creates logs. I cannot name the app (yet) but hopefully,
this is useful.&lt;/p&gt;</description></item><item><title>Old ContextIS Challenge Solutions</title><link>https://parsiya.net/blog/2020-02-09-old-contextis-challenge-solutions/</link><pubDate>Sun, 09 Feb 2020 19:08:07 -0800</pubDate><guid>https://parsiya.net/blog/2020-02-09-old-contextis-challenge-solutions/</guid><description>&lt;p&gt;A few years ago I did the &lt;a href="https://www.contextis.com/en/" target="_blank" rel="noreferrer noopener"&gt;Context Information Security&lt;/a&gt;
challenges. They used it for recruiting so I never published the results.
However, they have now switched to &lt;a href="https://www.hackthebox.eu/" target="_blank" rel="noreferrer noopener"&gt;Hack The Box&lt;/a&gt; and the old
challenges are gone. So I am publishing what I did.&lt;/p&gt;
&lt;p&gt;You can see the page with the old challenges using the Wayback Machine at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://web.archive.org/web/20181012035146/https://www.contextis.com/en/careers/challenges" target="_blank" rel="noreferrer noopener"&gt;http://web.archive.org/web/20181012035146/https://www.contextis.com/en/careers/challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also did some of their &lt;a href="https://parsiya.net/blog/2018-06-05-contextis-xmas-ctf-writeup/" title="xmas 2018 challenges"&gt;xmas 2018 challenges&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Some SANS Holiday Hack 2019 Solutions</title><link>https://parsiya.net/blog/2020-01-15-some-sans-holiday-hack-2019-solutions/</link><pubDate>Wed, 15 Jan 2020 00:09:11 -0800</pubDate><guid>https://parsiya.net/blog/2020-01-15-some-sans-holiday-hack-2019-solutions/</guid><description>&lt;p&gt;I did some of the solutions for the SANS Holiday Hack Challenge of 2019. Last
year I participated for the first time. You can find the solutions below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2019-01-15-sans-holiday-hack-challenge-2018-solutions/" title="SANS Holiday Hack 2018 Solutions"&gt;SANS Holiday Hack 2018 Solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>SANS Holiday Hack Challenge 2018 Solutions</title><link>https://parsiya.net/blog/2019-01-15-sans-holiday-hack-challenge-2018-solutions/</link><pubDate>Tue, 15 Jan 2019 19:33:21 -0500</pubDate><guid>https://parsiya.net/blog/2019-01-15-sans-holiday-hack-challenge-2018-solutions/</guid><description>&lt;p&gt;SANS Holiday hack challenge 2018 was fun. It was also the first one I tried. I liked the talks and that the challenges were accessible to most skill levels. I mean &lt;a href="https://abiondo.me/2019/01/02/exploiting-math-expm1-v8/" target="_blank" rel="noreferrer noopener"&gt;RCE through the -0 bug in v8 is great and all&lt;/a&gt; but I want people to be able to have fun and learn new skills.&lt;/p&gt;
&lt;p&gt;If being a security consultant has taught me anything, it's that no one has time to read your 100 page report. So here are some quick solutions. I will post my notes from the YouTube videos in different posts.&lt;/p&gt;</description></item><item><title>Cloudflare Concise Christmas Cryptography Challenges 2019 Solutions</title><link>https://parsiya.net/blog/2019-01-03-cloudflare-concise-christmas-cryptography-challenges-2019-solutions/</link><pubDate>Thu, 03 Jan 2019 20:24:15 -0500</pubDate><guid>https://parsiya.net/blog/2019-01-03-cloudflare-concise-christmas-cryptography-challenges-2019-solutions/</guid><description>&lt;p&gt;Cloudflare had a &lt;a href="https://blog.cloudflare.com/christmas-cryptography-challenges-2019/" target="_blank" rel="noreferrer noopener"&gt;Christmas crypto(graphy) challenge&lt;/a&gt;. Here are my solutions. The first two questions were pretty easy but the 3rd sent me down on a rabbit hole. Apparently, only 15 people solved it which places me in the world top 15 cryptographers (that's how it works right?).&lt;/p&gt;</description></item><item><title>Cryptography in Python Burp Extensions</title><link>https://parsiya.net/blog/2018-12-24-cryptography-in-python-burp-extensions/</link><pubDate>Mon, 24 Dec 2018 01:00:14 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-24-cryptography-in-python-burp-extensions/</guid><description>&lt;p&gt;In this post, I will discuss a few tricks for creating Burp extensions in Python that deal with cryptography. Our example is a Burp extension that adds a new tab to decode and decrypt an application's traffic. This allows us to modify payloads on the fly and take advantage of Repeater (and other tabs). I have used similar extensions when testing mobile and thickclient applications.&lt;/p&gt;
&lt;p&gt;The code is at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/python-burp-crypto" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Parsia-Code/tree/master/python-burp-crypto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>AES-CFB128: PyCrypto vs. Go</title><link>https://parsiya.net/blog/2018-12-22-aes-cfb128-pycrypto-vs.-go/</link><pubDate>Sat, 22 Dec 2018 19:25:10 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-22-aes-cfb128-pycrypto-vs.-go/</guid><description>&lt;p&gt;We have encrypted something with AES-CFB128 in Go. How can we decrypt it with PyCrypto?&lt;/p&gt;
&lt;p&gt;This was originally part of the next blog post (about creating Python Burp extensions) but it grew large enough to be a separate post.&lt;/p&gt;
&lt;p&gt;Disclaimer: I am not knowledgeable enough to explain cryptography to people. Read actual papers/books/articles to figure things out. If you find mistakes here, please let me know.&lt;/p&gt;
&lt;p&gt;Code is at: &lt;a href="https://github.com/parsiya/Go-Security/tree/master/aes-cfb128" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Go-Security/tree/master/aes-cfb128&lt;/a&gt;&lt;/p&gt;</description></item><item><title>ContextIS xmas CTF Writeup</title><link>https://parsiya.net/blog/2018-06-05-contextis-xmas-ctf-writeup/</link><pubDate>Tue, 05 Jun 2018 22:34:55 -0400</pubDate><guid>https://parsiya.net/blog/2018-06-05-contextis-xmas-ctf-writeup/</guid><description>&lt;p&gt;In January 2018, &lt;a href="https://www.contextis.com/" target="_blank" rel="noreferrer noopener"&gt;Context Information Security&lt;/a&gt; had a CTF. Here are my write-ups for some of them and write-ups for some I did not figure out. But that's CTF for you. If you manage to walk down the path of designer, you will be fine. Otherwise, you will have a bad time.&lt;/p&gt;
&lt;p&gt;But enough complaining, let's see what happens.&lt;/p&gt;</description></item><item><title>Tales from the Crypt(o) - Leaking AES Keys</title><link>https://parsiya.net/blog/2015-01-06-tales-from-the-crypto-leaking-aes-keys/</link><pubDate>Tue, 06 Jan 2015 23:36:48 +0000</pubDate><guid>https://parsiya.net/blog/2015-01-06-tales-from-the-crypto-leaking-aes-keys/</guid><description>&lt;p&gt;This post is part one of a two part internal blog entry on creating a Pintool for an assessment. Unfortunately I cannot talk about it, so I decided to put the first part out. If I find an opensource program similar to the assessment I will try and recreate the tool (but I am not holding my breath). As this part is essentially a build up, it may not be coherent at times. Alteratively, if you really want to read it, you can join us. We are almost always hiring (let me do the referral though ;).&lt;/p&gt;
&lt;p&gt;Today we are going to talk about discovering encryption keys in sneaky ways. We will start with simple examples, do a bit of Digital Forensics or DF (for low standards of DF) and finally in part two we will use our recently acquired knowledge of Pintool to do &lt;code&gt;[redacted]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First let's talk a bit about the inner-workings of AES decryption. By inner-workings of AES I do not mean the following diagrams that you have seen so many times.&lt;/p&gt;</description></item><item><title>Apple's Common Crypto Library Defaults to a Zero IV if One is not Provided</title><link>https://parsiya.net/blog/2014-07-03-apples-common-crypto-library-defaults-to-a-zero-iv-if-one-is-not-provided/</link><pubDate>Thu, 03 Jul 2014 01:30:18 +0000</pubDate><guid>https://parsiya.net/blog/2014-07-03-apples-common-crypto-library-defaults-to-a-zero-iv-if-one-is-not-provided/</guid><description>&lt;p&gt;Today I was writing some guidelines about generating keys for mobile applications at work. While providing code examples in Java and Obj-C for AES encryption I happened to look at Apple's [Common Crypto] &lt;a href="http://opensource.apple.com/source/CommonCrypto/CommonCrypto-60049/lib/" target="_blank" rel="noreferrer noopener"&gt;CCLink&lt;/a&gt; library . While going through the source code for [CommonCryptor.c] &lt;a href="http://opensource.apple.com/source/CommonCrypto/CommonCrypto-60049/lib/CommonCryptor.c" target="_blank" rel="noreferrer noopener"&gt;CCLink2&lt;/a&gt;, I noticed that IV is commented as &lt;code&gt;/* optional initialization vector */&lt;/code&gt;. This makes sense because not all ciphers use IV and not all AES modes of operation (e.g. ECB mode). However; if an IV is not provided, the library will default to a zero IV.&lt;/p&gt;</description></item><item><title>How do I TLS Ciphersuite?</title><link>https://parsiya.net/blog/2013-11-17-how-do-i-tls-ciphersuite/</link><pubDate>Sun, 17 Nov 2013 00:00:00 +0000</pubDate><guid>https://parsiya.net/blog/2013-11-17-how-do-i-tls-ciphersuite/</guid><description>&lt;p&gt;“Should we use RC4 or AES-CBC ?”
This is a legitimate question. Many have heard of the highly publicized attacks against AES-CBC (CRIME, BEAST etc) and lean towards RC4.
If asked (granted no one asks me), my answer would be: If you can control web servers (not feasible in all situations) and users' browsers
(almost impossible), upgrade to TLS 1.2 and go with AES-GCM. However, not many browsers supported these and to be honest, more users trumps loss
of security in many cases.&lt;/p&gt;</description></item></channel></rss>