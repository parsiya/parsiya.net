<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/python/</link><description>Recent content in Python on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 15 Nov 2020 20:57:46 -0800</lastBuildDate><atom:link href="https://parsiya.net/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Customizing Python's SimpleHTTPServer</title><link>https://parsiya.net/blog/2020-11-15-customizing-pythons-simplehttpserver/</link><pubDate>Sun, 15 Nov 2020 20:57:46 -0800</pubDate><guid>https://parsiya.net/blog/2020-11-15-customizing-pythons-simplehttpserver/</guid><description>&lt;p&gt;The other day I customized the Python built-in SimpleHTTPServer with some
routes. I did not find a lot of info about it (most use it to serve files). This
is how I did some basic customization.&lt;/p&gt;</description></item><item><title>Notes on Escaping Python Shells</title><link>https://parsiya.net/blog/2019-01-19-notes-on-escaping-python-shells/</link><pubDate>Sat, 19 Jan 2019 22:29:43 -0500</pubDate><guid>https://parsiya.net/blog/2019-01-19-notes-on-escaping-python-shells/</guid><description>&lt;p&gt;During the &lt;a href="https://parsiya.net/blog/2019-01-15-sans-holiday-hack-challenge-2018-solutions/" title="SANS Holiday Hack Challenge 2018"&gt;SANS Holiday Hack Challenge 2018&lt;/a&gt;, I viewed a talk by &lt;a href="https://twitter.com/markbaggett" target="_blank" rel="noreferrer noopener"&gt;Mark Baggett&lt;/a&gt; about escaping Python shells. These are my notes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Talk: &lt;a href="https://www.youtube.com/watch?v=ZVx2Sxl3B9c" target="_blank" rel="noreferrer noopener"&gt;https://www.youtube.com/watch?v=ZVx2Sxl3B9c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code: &lt;a href="https://gist.github.com/MarkBaggett/dd440362f8a443d644b913acadff9499" target="_blank" rel="noreferrer noopener"&gt;https://gist.github.com/MarkBaggett/dd440362f8a443d644b913acadff9499&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's part of &lt;a href="https://www.sans.org/course/automating-information-security-with-python" target="_blank" rel="noreferrer noopener"&gt;SANS SEC573: Automating Information Security with Python&lt;/a&gt; which looks interesting. Although, I am Go fanatic and will probably will never be able to afford to course anyways. Creating a Go version of the course sounds fun.&lt;/p&gt;</description></item><item><title>AES-CFB128: PyCrypto vs. Go</title><link>https://parsiya.net/blog/2018-12-22-aes-cfb128-pycrypto-vs.-go/</link><pubDate>Sat, 22 Dec 2018 19:25:10 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-22-aes-cfb128-pycrypto-vs.-go/</guid><description>&lt;p&gt;We have encrypted something with AES-CFB128 in Go. How can we decrypt it with PyCrypto?&lt;/p&gt;
&lt;p&gt;This was originally part of the next blog post (about creating Python Burp extensions) but it grew large enough to be a separate post.&lt;/p&gt;
&lt;p&gt;Disclaimer: I am not knowledgeable enough to explain cryptography to people. Read actual papers/books/articles to figure things out. If you find mistakes here, please let me know.&lt;/p&gt;
&lt;p&gt;Code is at: &lt;a href="https://github.com/parsiya/Go-Security/tree/master/aes-cfb128" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Go-Security/tree/master/aes-cfb128&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Pasting Shellcode in GDB using Python</title><link>https://parsiya.net/blog/2014-05-25-pasting-shellcode-in-gdb-using-python/</link><pubDate>Sun, 25 May 2014 18:39:58 +0000</pubDate><guid>https://parsiya.net/blog/2014-05-25-pasting-shellcode-in-gdb-using-python/</guid><description>&lt;p&gt;A few days ago I was trying to write an exploit for a buffer overflow with GDB. This was a console application and pasting shellcode would mess with it.&lt;/p&gt;
&lt;p&gt;There are a few options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing shellcode to a file and then using it as input for GDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#586e75"&gt;# you can also include GDB commands like setting up breakpoints (e.g. b * 0xDEADBEEF)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#586e75"&gt;# remember to include a new line after each command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ python &lt;span style="color:#719e07"&gt;-&lt;/span&gt;c &lt;span style="color:#2aa198"&gt;&amp;#39;print &amp;#34;b * 0xDEADBEEF&amp;#34; + &amp;#34;&lt;/span&gt;&lt;span style="color:#cb4b16"&gt;\n&lt;/span&gt;&lt;span style="color:#2aa198"&gt;&amp;#34; + &amp;#34;&lt;/span&gt;&lt;span style="color:#cb4b16"&gt;\x41&lt;/span&gt;&lt;span style="color:#2aa198"&gt;&amp;#34;*1000 + &amp;#34;&lt;/span&gt;&lt;span style="color:#cb4b16"&gt;\n&lt;/span&gt;&lt;span style="color:#2aa198"&gt;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style="color:#719e07"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#b58900"&gt;input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#586e75"&gt;# $ perl -e for perl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#586e75"&gt;# start debugging with GDB&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#586e75"&gt;# -q (quiet mode): no text at startup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ gdb executable1 &lt;span style="color:#719e07"&gt;-&lt;/span&gt;q
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(gdb) run &lt;span style="color:#719e07"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#b58900"&gt;input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this you can manually debug in GDB.&lt;/p&gt;</description></item></channel></rss>