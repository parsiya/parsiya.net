<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Electron on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/electron/</link><description>Recent content in Electron on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 08 Jan 2021 22:33:32 -0800</lastBuildDate><atom:link href="https://parsiya.net/categories/electron/index.xml" rel="self" type="application/rss+xml"/><item><title>Attack Surface Analysis - Part 1 - Application Update:
'A Novel Way to Bypass Executable Signature Checks with Electron'</title><link>https://parsiya.net/blog/2021-01-08-attack-surface-analysis-part-1-application-update-a-novel-way-to-bypass-executable-signature-checks-with-electron/</link><pubDate>Fri, 08 Jan 2021 22:33:32 -0800</pubDate><guid>https://parsiya.net/blog/2021-01-08-attack-surface-analysis-part-1-application-update-a-novel-way-to-bypass-executable-signature-checks-with-electron/</guid><description>&lt;p&gt;A few months ago I found a way to subvert the update process of an Electron
application to get local privilege escalation. The application stores the
updater under a path where standard users have write access. But it also
checked if the executable was signed by the vendor. I managed to bypass the
signing using a backdoored Electron application.&lt;/p&gt;</description></item><item><title>The $15000 PlayStation Bounty</title><link>https://parsiya.net/blog/2021-01-01-the-15000-playstation-bounty/</link><pubDate>Fri, 01 Jan 2021 15:29:00 -0800</pubDate><guid>https://parsiya.net/blog/2021-01-01-the-15000-playstation-bounty/</guid><description>&lt;p&gt;Earlier in December 2020, my &lt;code&gt;PlayStation Now&lt;/code&gt; report was disclosed. You can see
the report at &lt;a href="https://hackerone.com/reports/873614" target="_blank" rel="noreferrer noopener"&gt;https://hackerone.com/reports/873614&lt;/a&gt;. That is my first paid bounty
and my first disclosed report. It was quite exciting. I doubt I can top it.&lt;/p&gt;</description></item><item><title>Chaining Three Bugs to Get RCE in Microsoft AttackSurfaceAnalyzer</title><link>https://parsiya.net/blog/2019-06-18-chaining-three-bugs-to-get-rce-in-microsoft-attacksurfaceanalyzer/</link><pubDate>Tue, 18 Jun 2019 13:03:53 -0700</pubDate><guid>https://parsiya.net/blog/2019-06-18-chaining-three-bugs-to-get-rce-in-microsoft-attacksurfaceanalyzer/</guid><description>&lt;p&gt;This is a blog post about how I found three vulns and chained them to get RCE in
the Microsoft
&lt;a href="https://github.com/microsoft/AttackSurfaceAnalyzer" target="_blank" rel="noreferrer noopener"&gt;AttackSurfaceAnalyzer&lt;/a&gt; (ASA
moving forward) GUI version.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ASA uses &lt;a href="https://github.com/ElectronNET/Electron.NET" target="_blank" rel="noreferrer noopener"&gt;Electron.NET&lt;/a&gt; which
binds the internal Kestrel web server to &lt;code&gt;0.0.0.0&lt;/code&gt;. If permission is given to
bypass the Windows OS firewall (or if used on an OS without one), a remote
attacker can connect to it and access the application.&lt;/li&gt;
&lt;li&gt;The web application is vulnerable to Cross-Site Scripting (XSS). A remote
attacker can submit a runID with embedded JavaScript that is executed by
the victim using the ASA Electron application.&lt;/li&gt;
&lt;li&gt;Electron.NET does not have the &lt;code&gt;NodeIntegration&lt;/code&gt; flag set to false. This
allows the JavaScript payload to spawn up processes on the victim's machine.&lt;/li&gt;
&lt;/ol&gt;</description></item></channel></rss>