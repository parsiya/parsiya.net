<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/go/</link><description>Recent content in Go on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 17 May 2020 22:37:21 -0700</lastBuildDate><atom:link href="https://parsiya.net/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Slices and Their Oddities</title><link>https://parsiya.net/blog/2020-05-17-go-slices-and-their-oddities/</link><pubDate>Sun, 17 May 2020 22:37:21 -0700</pubDate><guid>https://parsiya.net/blog/2020-05-17-go-slices-and-their-oddities/</guid><description>&lt;p&gt;A friend pointed me to this &lt;a href="https://medium.com/@gotzmann/so-you-think-you-know-go-c5164b0d0511" target="_blank" rel="noreferrer noopener"&gt;Go quiz about slices&lt;/a&gt; by
&lt;a href="https://github.com/gotzmann" target="_blank" rel="noreferrer noopener"&gt;Serge Gotsuliak&lt;/a&gt;. It's an interesting exercise and points out the
intricacies of Go slices. I decided to explore it in detail. These oddities
might have security implications.&lt;/p&gt;</description></item><item><title>The Golang int and the Overlooked Bug</title><link>https://parsiya.net/blog/2020-04-05-the-golang-int-and-the-overlooked-bug/</link><pubDate>Sun, 05 Apr 2020 01:19:36 -0700</pubDate><guid>https://parsiya.net/blog/2020-04-05-the-golang-int-and-the-overlooked-bug/</guid><description>&lt;p&gt;This blog is about a &lt;a href="https://securitylab.github.com/" target="_blank" rel="noreferrer noopener"&gt;GitHub Security Lab&lt;/a&gt; &lt;code&gt;Spot The Bug&lt;/code&gt;
challenge that had an overlooked bug. &lt;a href="https://twitter.com/GHSecurityLab" target="_blank" rel="noreferrer noopener"&gt;Github Security Lab's Twitter account&lt;/a&gt;
tweets code snippets from time to time. The challenge is to spot the bug.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclosure&lt;/strong&gt;: I might be completely wrong because we only have access to the
snippet in the picture and people at the GitHub Security Lab are better than me
in static analysis.&lt;/p&gt;</description></item><item><title>path.Join Considered Harmful</title><link>https://parsiya.net/blog/2019-03-09-path.join-considered-harmful/</link><pubDate>Sat, 09 Mar 2019 20:43:40 -0500</pubDate><guid>https://parsiya.net/blog/2019-03-09-path.join-considered-harmful/</guid><description>&lt;p&gt;Credit goes to my friend &lt;a href="https://www.linkedin.com/in/stark-riedesel-4162b846" target="_blank" rel="noreferrer noopener"&gt;Stark Riedesel&lt;/a&gt;. Check out his &lt;a href="https://github.com/starkriedesel/" target="_blank" rel="noreferrer noopener"&gt;github profile&lt;/a&gt;. One of these days I will bully him into reviving his blog.&lt;/p&gt;
&lt;p&gt;TL;DR: Instead of &lt;a href="https://golang.org/pkg/path/#Join" target="_blank" rel="noreferrer noopener"&gt;path.join&lt;/a&gt; use &lt;a href="https://golang.org/pkg/path/filepath/" target="_blank" rel="noreferrer noopener"&gt;filepath.Join&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>AES-CFB128: PyCrypto vs. Go</title><link>https://parsiya.net/blog/2018-12-22-aes-cfb128-pycrypto-vs.-go/</link><pubDate>Sat, 22 Dec 2018 19:25:10 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-22-aes-cfb128-pycrypto-vs.-go/</guid><description>&lt;p&gt;We have encrypted something with AES-CFB128 in Go. How can we decrypt it with PyCrypto?&lt;/p&gt;
&lt;p&gt;This was originally part of the next blog post (about creating Python Burp extensions) but it grew large enough to be a separate post.&lt;/p&gt;
&lt;p&gt;Disclaimer: I am not knowledgeable enough to explain cryptography to people. Read actual papers/books/articles to figure things out. If you find mistakes here, please let me know.&lt;/p&gt;
&lt;p&gt;Code is at: &lt;a href="https://github.com/parsiya/Go-Security/tree/master/aes-cfb128" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Go-Security/tree/master/aes-cfb128&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Pointers Inside for</title><link>https://parsiya.net/blog/2018-11-18-pointers-inside-for/</link><pubDate>Sun, 18 Nov 2018 16:57:24 -0500</pubDate><guid>https://parsiya.net/blog/2018-11-18-pointers-inside-for/</guid><description>&lt;p&gt;Do not directly assign the for counter/range variables to a slice as pointers. Read this by Jon Calhoun &lt;a href="https://www.calhoun.io/gotchas-and-common-mistakes-with-closures-in-go/#variables-declared-in-for-loops-are-passed-by-reference" target="_blank" rel="noreferrer noopener"&gt;Variables declared in for loops are passed by reference&lt;/a&gt;. &amp;quot;[...] the variables aren't being redeclared with each iteration [...]&amp;quot;.&lt;/p&gt;
&lt;p&gt;I have written so much buggy code that I am going to write this down.&lt;/p&gt;</description></item><item><title>filepath.Ext Notes</title><link>https://parsiya.net/blog/2018-11-10-filepath.ext-notes/</link><pubDate>Sat, 10 Nov 2018 00:59:58 -0500</pubDate><guid>https://parsiya.net/blog/2018-11-10-filepath.ext-notes/</guid><description>&lt;p&gt;The &lt;a href="https://golang.org/pkg/path/filepath/" target="_blank" rel="noreferrer noopener"&gt;filepath&lt;/a&gt; package has some functions for processing paths and filenames. I am using it extensively in a current project. You can do cool stuff with it, like &lt;a href="https://parsiya.net/blog/2018-10-06-gophercises-lessons-learned/#filepath-walk" title="filepath.Walk"&gt;traversing a path recursively with filepath.Walk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://golang.org/pkg/path/filepath/#Ext" target="_blank" rel="noreferrer noopener"&gt;filepath.Ext&lt;/a&gt; returns the extension of a filename (or path). It returns whatever is after the last dot. It has some gotchas that might have security implications.&lt;/p&gt;
&lt;p&gt;Code is at: &lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/filepath-ext" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Parsia-Code/tree/master/filepath-ext&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Windows Filetime Timestamps and Byte Wrangling with Go</title><link>https://parsiya.net/blog/2018-11-01-windows-filetime-timestamps-and-byte-wrangling-with-go/</link><pubDate>Thu, 01 Nov 2018 08:05:47 -0400</pubDate><guid>https://parsiya.net/blog/2018-11-01-windows-filetime-timestamps-and-byte-wrangling-with-go/</guid><description>&lt;p&gt;For a side project, I have to parse timestamps in a file. These timestamps are in the Windows Filetime format. This post documents what I have learned about them and how they can be converted to a Golang &lt;a href="https://golang.org/pkg/time/#Time" target="_blank" rel="noreferrer noopener"&gt;time.Time&lt;/a&gt; and then converted to any desirable format after that.&lt;/p&gt;
&lt;p&gt;We will start by looking at endian-ness and use a real-world example to practice our newly acquired knowledge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: To convert a Windows Filetime to Go's time.Time:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read 8 bytes in LittleEndian from the file.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;syscall.Filetime&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Assign the first 4 bytes to &lt;code&gt;LowDateTime&lt;/code&gt; field and the other four to &lt;code&gt;HighDateTime&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convert the resulting Filetime to nanoseconds with &lt;a href="https://godoc.org/golang.org/x/sys/windows#Filetime.Nanoseconds" target="_blank" rel="noreferrer noopener"&gt;Filetime.Nanoseconds()&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Convert the resulting value to &lt;a href="https://golang.org/pkg/time/#Time" target="_blank" rel="noreferrer noopener"&gt;time.Time&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code is at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/filetime-bytewrangling" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Parsia-Code/tree/master/filetime-bytewrangling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blackfriday's Parser and Generating graphs with gographviz</title><link>https://parsiya.net/blog/2018-10-28-blackfridays-parser-and-generating-graphs-with-gographviz/</link><pubDate>Sun, 28 Oct 2018 11:31:34 -0400</pubDate><guid>https://parsiya.net/blog/2018-10-28-blackfridays-parser-and-generating-graphs-with-gographviz/</guid><description>&lt;p&gt;I have been working on a personal automation project. In short, I write most of my notes in markdown so I wanted to grab them and store them in a specific format with annotations (e.g. everything under heading &lt;code&gt;deployment notes&lt;/code&gt; is labeled as such in the final data file). These are not high volume, large files. I have written them manually, I am talking about a 10-20 KB file (with most content being pasted code/request snippets). I am not looking for efficiency.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://godoc.org/gopkg.in/russross/blackfriday.v2" target="_blank" rel="noreferrer noopener"&gt;Blackfriday&lt;/a&gt; is the markdown parser for &lt;a href="https://github.com/gohugoio/hugo" target="_blank" rel="noreferrer noopener"&gt;Hugo&lt;/a&gt;, so I was somewhat familiar with it. Since version 2, it has a markdown parser.&lt;/p&gt;
&lt;p&gt;In this post, I am going to describe what I learned during the process and how I leveraged Blackfriday's markdown parser in some hacky ways to get annotated data. To visualize the AST (Abstract Syntax Tree) generated by Blackfriday, I used &lt;a href="https://github.com/awalterschulze/gographviz" target="_blank" rel="noreferrer noopener"&gt;gographviz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A simple package &lt;code&gt;parse&lt;/code&gt; and code can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/markdown-parsing" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Parsia-Code/tree/master/markdown-parsing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Gophercises - Lessons Learned</title><link>https://parsiya.net/blog/2018-10-06-gophercises-lessons-learned/</link><pubDate>Sat, 06 Oct 2018 00:22:58 -0400</pubDate><guid>https://parsiya.net/blog/2018-10-06-gophercises-lessons-learned/</guid><description>&lt;p&gt;I recently finished &lt;a href="https://gophercises.com" target="_blank" rel="noreferrer noopener"&gt;Gophercises&lt;/a&gt;, a great set of Go practice lessons by &lt;a href="https://www.calhoun.io/" target="_blank" rel="noreferrer noopener"&gt;Jon Calhoun&lt;/a&gt;. I think it took me around a month from start to finish with some stuff in the middle. Most were nice, some were tedious. For example, the last exercise was about &lt;a href="https://gophercises.com/exercises/pdf" target="_blank" rel="noreferrer noopener"&gt;PDF generation&lt;/a&gt; and went to boring quickly.&lt;/p&gt;
&lt;p&gt;After every lesson, I wrote down &amp;quot;Lessons Learned&amp;quot; in the README. This page collects most of them. All code is here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/gophercises" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Parsia-Code/tree/master/gophercises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Learning Go-Fuzz 2: goexif2</title><link>https://parsiya.net/blog/2018-05-05-learning-go-fuzz-2-goexif2/</link><pubDate>Sat, 05 May 2018 18:01:09 -0400</pubDate><guid>https://parsiya.net/blog/2018-05-05-learning-go-fuzz-2-goexif2/</guid><description>&lt;p&gt;Previously on &lt;code&gt;Learning Go-Fuzz&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2018-04-29-learning-go-fuzz-1-iprange/" title="Learning Go-Fuzz 1: iprange"&gt;&amp;quot;Learning Go-Fuzz 1: iprange&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This time I am looking at a different package. This is a package called &lt;code&gt;goexif&lt;/code&gt; at &lt;a href="https://github.com/rwcarlsen/goexif" target="_blank" rel="noreferrer noopener"&gt;https://github.com/rwcarlsen/goexif&lt;/a&gt;. Being a file parser, it's a prime target for &lt;code&gt;Go-Fuzz&lt;/code&gt;. Unfortunately it has not been updated for a while. Instead, we will be looking at a fork at &lt;a href="https://github.com/xor-gate/goexif2" target="_blank" rel="noreferrer noopener"&gt;https://github.com/xor-gate/goexif2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Code and fuzzing artifacts are at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Go-Security/tree/master/go-fuzz/goexif2" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Go-Security/tree/master/go-fuzz/goexif2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- Links in summary --&gt;</description></item><item><title>Learning Go-Fuzz 1: iprange</title><link>https://parsiya.net/blog/2018-04-29-learning-go-fuzz-1-iprange/</link><pubDate>Sun, 29 Apr 2018 19:25:10 -0400</pubDate><guid>https://parsiya.net/blog/2018-04-29-learning-go-fuzz-1-iprange/</guid><description>&lt;p&gt;&lt;a href="https://github.com/dvyukov/go-fuzz" target="_blank" rel="noreferrer noopener"&gt;Go-Fuzz&lt;/a&gt; is like AFL but for Go. If you have a Go package that parses some input, you might be able fuzz it with Go-Fuzz (terms and conditions apply). Not everything can be fuzzed very easily. For example Go-Fuzz does not like cycling imports, so if one of your sub-packages imports the main package then you are in trouble (I am looking at your &lt;a href="https://github.com/alecthomas/chroma" target="_blank" rel="noreferrer noopener"&gt;Chroma&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The rest of the article will show how to use Go-Fuzz to fuzz a Go library named &lt;code&gt;iprange&lt;/code&gt; at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/malfunkt/iprange" target="_blank" rel="noreferrer noopener"&gt;https://github.com/malfunkt/iprange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code and fuzzing artifacts are at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Go-Security/tree/master/go-fuzz/iprange" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Go-Security/tree/master/go-fuzz/iprange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- Summary Links --&gt;</description></item><item><title>Extracting PNG Chunks with Go</title><link>https://parsiya.net/blog/2018-02-25-extracting-png-chunks-with-go/</link><pubDate>Sun, 25 Feb 2018 18:27:49 -0500</pubDate><guid>https://parsiya.net/blog/2018-02-25-extracting-png-chunks-with-go/</guid><description>&lt;p&gt;Yesterday I had to extract some data from hidden chunks in PNG files. I realized the PNG file format is blissfully simple.&lt;/p&gt;
&lt;p&gt;I wrote some quick code that parses a PNG file, extracts some information, identifies chunks and finally extracts chunk data. The code has minimal error handling (if chunks are not formatted properly). We also do not care about parsing &lt;code&gt;PLTE&lt;/code&gt; and &lt;code&gt;tRNS&lt;/code&gt; chunks although we will extract them.&lt;/p&gt;
&lt;p&gt;Code is at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Go-Security/blob/master/png-tests/png-chunk-extraction.go" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Go-Security/blob/master/png-tests/png-chunk-extraction.go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Decoding Large Base64 Files with Go</title><link>https://parsiya.net/blog/2018-01-19-decoding-large-base64-files-with-go/</link><pubDate>Fri, 19 Jan 2018 22:45:55 -0500</pubDate><guid>https://parsiya.net/blog/2018-01-19-decoding-large-base64-files-with-go/</guid><description>&lt;p&gt;I am working on this challenge and it has a large base64 file. Each line has 2 characters and it has 150+ million lines.&lt;/p&gt;
&lt;p&gt;Luckily we can use the &lt;a href="https://golang.org/pkg/encoding/base64/#NewDecoder" target="_blank" rel="noreferrer noopener"&gt;Base64 stream decoder&lt;/a&gt;. It reads from an &lt;code&gt;io.Reader&lt;/code&gt; and returns one that can be copied into an &lt;code&gt;io.Writer&lt;/code&gt;. It also takes care of the new lines.&lt;/p&gt;
&lt;p&gt;Sample code is at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Go-Security/blob/master/base64-stream-decoder/b64-stream-decoder.go" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Go-Security/blob/master/base64-stream-decoder/b64-stream-decoder.go&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Simple SSH Harvester in Go</title><link>https://parsiya.net/blog/2017-12-29-simple-ssh-harvester-in-go/</link><pubDate>Fri, 29 Dec 2017 13:40:56 -0500</pubDate><guid>https://parsiya.net/blog/2017-12-29-simple-ssh-harvester-in-go/</guid><description>&lt;p&gt;During my Go SSH adventures at &lt;a href="https://github.com/parsiya/Hacking-with-Go/blob/master/content/04.4.md" target="_blank" rel="noreferrer noopener"&gt;Hacking with Go&lt;/a&gt; I wanted to write a simple SSH harvester. As usual, the tool turned out to be much larger than I thought.&lt;/p&gt;
&lt;p&gt;I realized I cannot find any examples of SSH certificate verification. There are a few examples for host keys here and there. Even the &lt;code&gt;certs_test.go&lt;/code&gt; file just checks the host name. There was a &lt;a href="https://github.com/golang/go/issues/23266" target="_blank" rel="noreferrer noopener"&gt;typo in an error message&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt; in the &lt;code&gt;crypto/ssh&lt;/code&gt; package but I think because this is not very much used, had gone unreported.&lt;/p&gt;
&lt;p&gt;Here's my step by step guide to writing this tool by piggybacking on SSH host verification callbacks. Hopefully this will make it easier for the next person.&lt;/p&gt;
&lt;p&gt;You can find the code here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/SSH-Scanner/blob/master/SSHHarvesterv1.go?ts=4" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/SSH-Scanner/blob/master/SSHHarvesterv1.go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tldr-verifying-ssh-servers"&gt;TL;DR: verifying SSH servers
&lt;a class="header-link" href="#tldr-verifying-ssh-servers"&gt;&lt;svg class="fill-current o-60 hover-accent-color-light" height="22px" viewBox="0 0 24 24" width="22px" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M0 0h24v24H0z" fill="none"/&gt;&lt;path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"/&gt;&lt;/svg&gt;&lt;/a&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Create an instance of &lt;a href="https://godoc.org/golang.org/x/crypto/ssh#CertChecker" target="_blank" rel="noreferrer noopener"&gt;ssh.CertChecker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Set callback functions for &lt;code&gt;IsHostAuthority&lt;/code&gt;, &lt;code&gt;IsRevoked&lt;/code&gt; and optionally &lt;code&gt;HostKeyFallback&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IsHostAuthority&lt;/code&gt;'s callback should return &lt;code&gt;true&lt;/code&gt; for valid certificates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsRevoked&lt;/code&gt;'s callback should return &lt;code&gt;false&lt;/code&gt; for valid certificates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HostKeyFallback&lt;/code&gt;'s callback should return &lt;code&gt;nil&lt;/code&gt; for valid certificates.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create an instance of &lt;a href="https://godoc.org/golang.org/x/crypto/ssh#ClientConfig" target="_blank" rel="noreferrer noopener"&gt;ssh.ClientConfig&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;HostKeyCallback&lt;/code&gt; in &lt;code&gt;ClientConfig&lt;/code&gt; to &lt;code&gt;&amp;amp;ssh.CertChecker.CheckHostKey&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://godoc.org/golang.org/x/crypto/ssh#CertChecker.CheckHostKey" target="_blank" rel="noreferrer noopener"&gt;CheckHostKey&lt;/a&gt; will verify the certificate based on other callback functions.&lt;/li&gt;
&lt;li&gt;The certificate can be accessed in &lt;code&gt;IsRevoked&lt;/code&gt; callback function.&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Go and pcaps</title><link>https://parsiya.net/blog/2017-12-03-go-and-pcaps/</link><pubDate>Sun, 03 Dec 2017 18:40:26 -0500</pubDate><guid>https://parsiya.net/blog/2017-12-03-go-and-pcaps/</guid><description>&lt;p&gt;I was trying to solve a challenge where the &amp;quot;hidden data&amp;quot; were in ICMP echo payloads. I decided to do it in Go but there were some hiccups on the way. Here are my notes in case (most likely) future me or someone else needs to do the same.&lt;/p&gt;
&lt;p&gt;Code is in my clone at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Go-Security/tree/master/pcap-tutorial" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Go-Security/tree/master/pcap-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Go Notes</title><link>https://parsiya.net/go/</link><pubDate>Wed, 01 Jun 2016 20:35:00 -0400</pubDate><guid>https://parsiya.net/go/</guid><description>&lt;p&gt;These notes have moved to
&lt;a href="https://parsiya.io/dev/go/" target="_blank" rel="noreferrer noopener"&gt;https://parsiya.io/dev/go/&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Learning Go</title><link>https://parsiya.net/blog/2016-06-01-learning-go/</link><pubDate>Wed, 01 Jun 2016 20:35:00 -0400</pubDate><guid>https://parsiya.net/blog/2016-06-01-learning-go/</guid><description>&lt;p&gt;I have decided to learn Go (or Golang). I went through the &lt;a href="https://tour.golang.org/" target="_blank" rel="noreferrer noopener"&gt;Tour of Go&lt;/a&gt; and made some notes. Some of the items/code are directly copy pasted from there. The notes are just a cheatsheet to help me look things up quickly while learning. I will update that page as I learn more.&lt;/p&gt;
&lt;p&gt;You can see the notes at &lt;a href="https://parsiya.net/go/" title="Go Notes"&gt;https://parsiya.net/go/&lt;/a&gt;.&lt;/p&gt;</description></item></channel></rss>