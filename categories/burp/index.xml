<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Burp on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/burp/</link><description>Recent content in Burp on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 09 May 2020 13:01:59 -0700</lastBuildDate><atom:link href="https://parsiya.net/categories/burp/index.xml" rel="self" type="application/rss+xml"/><item><title>Thick Client Proxying - Part 10 - The hosts File</title><link>https://parsiya.net/blog/2020-05-09-thick-client-proxying-part-10-the-hosts-file/</link><pubDate>Sat, 09 May 2020 13:01:59 -0700</pubDate><guid>https://parsiya.net/blog/2020-05-09-thick-client-proxying-part-10-the-hosts-file/</guid><description>&lt;p>Welcome to the 10th installment of
&lt;a href="https://parsiya.net/categories/thick-client-proxying/" title="Thick Client Proxying">Thick Client Proxying&lt;/a>.
A series running since 2016. Woot! Today I will talk about traffic redirection
using the &lt;code>hosts&lt;/code> file.&lt;/p></description></item><item><title>Towards a Quieter Burp History</title><link>https://parsiya.net/blog/2020-05-01-towards-a-quieter-burp-history/</link><pubDate>Fri, 01 May 2020 23:13:24 -0700</pubDate><guid>https://parsiya.net/blog/2020-05-01-towards-a-quieter-burp-history/</guid><description>&lt;p>This is how I reduce the noise in Burp's HTTP history when testing thick
clients. You can use the methods here to create your own Burp configuration file
or build upon the one I have created. I am going to identify common noisy
requests that appear in Windows and then ignore them in Burp.&lt;/p></description></item><item><title>Using Mozilla Rhino to Run JavaScript in Java</title><link>https://parsiya.net/blog/2019-12-22-using-mozilla-rhino-to-run-javascript-in-java/</link><pubDate>Sun, 22 Dec 2019 20:13:09 -0800</pubDate><guid>https://parsiya.net/blog/2019-12-22-using-mozilla-rhino-to-run-javascript-in-java/</guid><description>&lt;p>This post discusses what I learned about executing JavaScript code in Java
with Mozilla Rhino. By the end of this post, you will know:&lt;/p>
&lt;ol>
&lt;li>What Rhino is.&lt;/li>
&lt;li>How to use Rhino in your Java application (e.g., a Burp extension).&lt;/li>
&lt;li>Some tips and tricks when dealing with Rhino.&lt;/li>
&lt;li>Alternative options to using Rhino.&lt;/li>
&lt;/ol>
&lt;p>Code is at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/java-rhino" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/java-rhino&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Developing and Debugging Java Burp Extensions with Visual Studio Code</title><link>https://parsiya.net/blog/2019-12-02-developing-and-debugging-java-burp-extensions-with-visual-studio-code/</link><pubDate>Mon, 02 Dec 2019 19:32:09 -0800</pubDate><guid>https://parsiya.net/blog/2019-12-02-developing-and-debugging-java-burp-extensions-with-visual-studio-code/</guid><description>&lt;p>A few days ago, I released the &lt;a href="https://github.com/parsiya/bug-diaries" target="_blank" rel="noreferrer noopener">Bug Diaries&lt;/a>
Burp extension. It's a Burp extension that aims to mimic Burp issues for the
community (free) version. For reasons, I decided to rewrite it in Java. This is
the first part of my series on what I learned switching to Java.&lt;/p>
&lt;p>This part discusses how my environment is set up for development with
&lt;a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer noopener">Visual Studio Code&lt;/a>. Things like
auto-completion, Gradle builds and most importantly debugging.&lt;/p>
&lt;p>Clone the repository to skip some of the steps in the blog. I still recommend
doing them yourself if you are not familiar with Gradle and Burp development,
clone the following repository:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/burp-sample-extension-java" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/burp-sample-extension-java&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Swing in Python Burp Extensions - Part 3 - Tips and Tricks</title><link>https://parsiya.net/blog/2019-11-26-swing-in-python-burp-extensions-part-3-tips-and-tricks/</link><pubDate>Tue, 26 Nov 2019 00:24:37 -0800</pubDate><guid>https://parsiya.net/blog/2019-11-26-swing-in-python-burp-extensions-part-3-tips-and-tricks/</guid><description>&lt;p>In the two previous parts, we learned about Jython Swing. Those blogs take a lot
of time to write. I think each of them took around 10 hours. I do not want to
spend that kind of time but I still want to document what I have learned.&lt;/p>
&lt;p>In this blog I will write tips and tricks with a small code snippet instead of
creating a complete extension.&lt;/p>
&lt;p>Did I tell you I release &lt;a href="https://github.com/parsiya/bug-diaries" target="_blank" rel="noreferrer noopener">Bug Diaries&lt;/a>,
it's a Python Burp extension that aims to bring Burp issues to the community
version. It's pretty neat.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://parsiya.net/blog/2019-11-04-swing-in-python-burp-extensions-part-1/" title="Swing in Python Burp Extensions - Part 1">Swing in Python Burp Extensions - Part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2019-11-11-swing-in-python-burp-extensions-part-2-netbeans-and-tablemodels/" title="Swing in Python Burp Extensions - Part 2 - NetBeans and TableModels">Swing in Python Burp Extensions - Part 2 - NetBeans and TableModels&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Swing in Python Burp Extensions - Part 2 - NetBeans and TableModels</title><link>https://parsiya.net/blog/2019-11-11-swing-in-python-burp-extensions-part-2-netbeans-and-tablemodels/</link><pubDate>Mon, 11 Nov 2019 12:00:53 -0800</pubDate><guid>https://parsiya.net/blog/2019-11-11-swing-in-python-burp-extensions-part-2-netbeans-and-tablemodels/</guid><description>&lt;p>In &lt;a href="https://parsiya.net/blog/2019-11-04-swing-in-python-burp-extensions-part-1/" title="Swing
in Python Burp Extensions - Part 1">part 1&lt;/a> we discussed handcrafting Swing GUI items
in a form. In this part, we will design a GUI using
&lt;a href="https://netbeans.org/" target="_blank" rel="noreferrer noopener">NetBeans&lt;/a> and then convert it to Jython. Then use it in
a Burp tab. Next, we will create a custom table model based on objects to handle
our issues.&lt;/p>
&lt;p>Code is at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/jython-swing-2" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/jython-swing-2&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Swing in Python Burp Extensions - Part 1</title><link>https://parsiya.net/blog/2019-11-04-swing-in-python-burp-extensions-part-1/</link><pubDate>Mon, 04 Nov 2019 00:40:42 -0700</pubDate><guid>https://parsiya.net/blog/2019-11-04-swing-in-python-burp-extensions-part-1/</guid><description>&lt;p>&lt;strong>TL;DR:&lt;/strong> What I learned from creating handcrafted GUIs for Python Burp
extensions using Swing. Code is at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/jython-swing-1" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/jython-swing-1&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Quality of Life Tips and Tricks - Burp Suite</title><link>https://parsiya.net/blog/2019-10-13-quality-of-life-tips-and-tricks-burp-suite/</link><pubDate>Sun, 13 Oct 2019 20:48:26 -0700</pubDate><guid>https://parsiya.net/blog/2019-10-13-quality-of-life-tips-and-tricks-burp-suite/</guid><description>&lt;p>Quality of life patch/update in the context of videogames is a patch that
focuses on fixing bugs instead of introducing new content. New features in these
patches are not ground-breaking but rather making the game easier to play&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I have been using these things to make my life easier. I am publishing them
gradually and will refine them into one final page similar to the
&lt;a href="https://parsiya.net/cheatsheet/" title="cheatsheet">cheatsheet&lt;/a>. This page
also pairs really well with &lt;a href="https://parsiya.net/categories/automation/" title="automation">automation&lt;/a>.&lt;/p></description></item><item><title>Disabling Burp's Update Screen - Part 1 - Analysis and Failures</title><link>https://parsiya.net/blog/2019-04-21-disabling-burps-update-screen-part-1-analysis-and-failures/</link><pubDate>Sun, 21 Apr 2019 14:58:50 -0700</pubDate><guid>https://parsiya.net/blog/2019-04-21-disabling-burps-update-screen-part-1-analysis-and-failures/</guid><description>&lt;p>I tried to disable Burp's update nag screen and failed. This blog post describes
the analysis and my effort to date.&lt;/p>
&lt;p>Hacky Workaround: Block outgoing requests to &lt;code>54.246.133.196&lt;/code> but this will
also, block installing extensions from the Burp app store.&lt;/p>
&lt;p>Part two (if there is one) will discuss more things that I tried and did not
work and/or what worked and how you can disable it.&lt;/p></description></item><item><title>Hiding OPTIONS - An Adventure in Dealing with Burp Proxy in an Extension</title><link>https://parsiya.net/blog/2019-04-06-hiding-options-an-adventure-in-dealing-with-burp-proxy-in-an-extension/</link><pubDate>Sat, 06 Apr 2019 15:30:16 -0700</pubDate><guid>https://parsiya.net/blog/2019-04-06-hiding-options-an-adventure-in-dealing-with-burp-proxy-in-an-extension/</guid><description>&lt;p>&lt;strong>TL;DR&lt;/strong>: No matter what you do, your Burp extension cannot modify requests before they hit the HTTP History panel. You can modify requests after that and before they are sent out. We will discuss two ways to modify them with extensions. While the Match/Replace functionality is special, it has the same limitation (note how it has a separate tab that says &lt;code>auto-modified&lt;/code>?).&lt;/p>
&lt;p>Update October 2019: Latest version using &lt;a href="https://github.com/parsiya/burputils/" target="_blank" rel="noreferrer noopener">burputils&lt;/a> is at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/burp-filter-options" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/burp-filter-options&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Cryptography in Python Burp Extensions</title><link>https://parsiya.net/blog/2018-12-24-cryptography-in-python-burp-extensions/</link><pubDate>Mon, 24 Dec 2018 01:00:14 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-24-cryptography-in-python-burp-extensions/</guid><description>&lt;p>In this post, I will discuss a few tricks for creating Burp extensions in Python that deal with cryptography. Our example is a Burp extension that adds a new tab to decode and decrypt an application's traffic. This allows us to modify payloads on the fly and take advantage of Repeater (and other tabs). I have used similar extensions when testing mobile and thickclient applications.&lt;/p>
&lt;p>The code is at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/python-burp-crypto" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/python-burp-crypto&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Python Utility Modules for Burp Extensions</title><link>https://parsiya.net/blog/2018-12-19-python-utility-modules-for-burp-extensions/</link><pubDate>Wed, 19 Dec 2018 22:48:10 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-19-python-utility-modules-for-burp-extensions/</guid><description>&lt;p>We can create and load Python/Java utility modules in Burp and then use them in extensions. It's a somewhat unknown/unused capability in Burp's Python/Java extensions.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Alternatively, the modules can be placed in the same path as the extension and loaded/used the same way. For example, instead of putting the Burp Exceptions file in the modules folder, store it in the extension directory.&lt;/p></description></item><item><title>Tiredful API - Part 2 - Comparing Site Maps with Burp</title><link>https://parsiya.net/blog/2018-12-17-tiredful-api-part-2-comparing-site-maps-with-burp/</link><pubDate>Mon, 17 Dec 2018 01:11:11 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-17-tiredful-api-part-2-comparing-site-maps-with-burp/</guid><description>&lt;p>In &lt;a href="https://parsiya.net/blog/2018-12-11-tiredful-api-part-1-burp-session-validation-with-macros/" title="Burp Session Validation with Macros">Part 1 - Burp Session Validation with Macros&lt;/a> I discussed using Burp macros to validate sessions. In this part, I will show how to use Burp's sitemap comparison to detect forced browsing/access control/direct object reference issues and the like.&lt;/p>
&lt;p>The flow is straightforward:&lt;/p>
&lt;ol>
&lt;li>Navigate around the application as user1. Personally, I just do my normal testing for a couple of days.&lt;/li>
&lt;li>Set a session handling rule to do one of the two:
&lt;ol>
&lt;li>Update the cookie from the cookie jar. In this case you login as user2 first and let Burp update cookies.&lt;/li>
&lt;li>Run a macro to create a valid session for user2 and use the token.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Tell Burp to compare site maps.&lt;/li>
&lt;/ol>
&lt;p>Also, read these:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://portswigger.net/burp/documentation/desktop/tools/target/site-map/comparing" target="_blank" rel="noreferrer noopener">https://portswigger.net/burp/documentation/desktop/tools/target/site-map/comparing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://support.portswigger.net/customer/portal/articles/1969844-using-burp-s-site-map-to-test-for-access-control-issues" target="_blank" rel="noreferrer noopener">https://support.portswigger.net/customer/portal/articles/1969844-using-burp-s-site-map-to-test-for-access-control-issues&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Tiredful API - Part 1 - Burp Session Validation with Macros</title><link>https://parsiya.net/blog/2018-12-11-tiredful-api-part-1-burp-session-validation-with-macros/</link><pubDate>Tue, 11 Dec 2018 00:15:07 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-11-tiredful-api-part-1-burp-session-validation-with-macros/</guid><description>&lt;p>&lt;a href="https://github.com/payatu/Tiredful-API" target="_blank" rel="noreferrer noopener">Tiredful API&lt;/a> is an intentionally vulnerable REST API. I am going to use it to practice a bunch of Burp tricks.&lt;/p>
&lt;p>In this part, I want to show how to use Burp macros to detect invalid session and add a custom bearer token header to the requests.&lt;/p></description></item><item><title>Thick Client Proxying - Part 5: FileHippo App Manager or the Bloated Hippo</title><link>https://parsiya.net/blog/2016-05-15-thick-client-proxying-part-5-filehippo-app-manager-or-the-bloated-hippo/</link><pubDate>Sun, 15 May 2016 16:55:24 -0400</pubDate><guid>https://parsiya.net/blog/2016-05-15-thick-client-proxying-part-5-filehippo-app-manager-or-the-bloated-hippo/</guid><description>&lt;p>I have talked a lot about this and that but have done nothing in action. Now I will talk about proxying actual applications. I will start with something easy, the &lt;a href="http://filehippo.com/download_app_manager/" target="_blank" rel="noreferrer noopener">FileHippo App Manager&lt;/a>. This app was chosen because it can be proxied with Burp, it does not use TLS and it has its own proxy settings (also works with Internet Explorer proxy settings). The requests are pretty simple to understand. I like the FileHippo website because it archives old versions of software. For example I loved the non-bloated Yahoo! Messenger 8.0 when I used it (it's pretty popular in some places) and used FileHippo to download the old versions.&lt;/p>
&lt;p>FileHippo App Manager turned out to be more interesting than I thought and this post turned into some .NET reverse engineering using dnSpy. Here's what I talk about in this post:&lt;/p>
&lt;ul>
&lt;li>The app contains the AWS SDK and a fortunately invalid set of AWS Access/Secret keys. Both the SDK and the keys are in dead code.&lt;/li>
&lt;li>Requests have an &lt;code>AccessToken&lt;/code> header which is generated client-side. We will discuss how it is generated.&lt;/li>
&lt;li>The application has a &amp;quot;hidden&amp;quot; DEBUG mode which unfortunately does nothing special. We will discover how to enable it.&lt;/li>
&lt;/ul></description></item><item><title>Thick Client Proxying - Part 4: Burp in Proxy Chains</title><link>https://parsiya.net/blog/2016-04-07-thick-client-proxying-part-4-burp-in-proxy-chains/</link><pubDate>Thu, 07 Apr 2016 21:17:25 -0400</pubDate><guid>https://parsiya.net/blog/2016-04-07-thick-client-proxying-part-4-burp-in-proxy-chains/</guid><description>&lt;p>In this post I will talk about using Burp as part of a proxy chain. The number of applications that can be proxied by Burp and used with Burp in proxy chains is &lt;em>infinite&lt;/em> for documentation purposes. Instead I am going to demonstrate how to use some of more used tools with Burp in proxy chain. All of this is going to happen on a Windows 7 Virtual Machine (VM).&lt;/p>
&lt;p>These applications/utilities are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cygwin.com/" target="_blank" rel="noreferrer noopener">Cygwin&lt;/a>: I will use cURL commands for demonstration purposes.&lt;/li>
&lt;li>IBM Appscan Standard: I will use the evaluation version.&lt;/li>
&lt;li>&lt;a href="https://www.charlesproxy.com/download/latest-release/" target="_blank" rel="noreferrer noopener">Charles Proxy&lt;/a>: For when you have to use multiple proxies.&lt;/li>
&lt;li>&lt;a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noreferrer noopener">Fiddler&lt;/a>: Same as above.&lt;/li>
&lt;li>&lt;a href="https://www.soapui.org/downloads/soapui.html" target="_blank" rel="noreferrer noopener">SoapUI&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>You don't need Burp Pro to play along and apart from Appscan, all application are free to use. For Appscan we will use the evaluation version which is free for its demo test.&lt;/p></description></item><item><title>Thick Client Proxying - Part 3: Burp Options and Extender</title><link>https://parsiya.net/blog/2016-04-02-thick-client-proxying-part-3-burp-options-and-extender/</link><pubDate>Sat, 02 Apr 2016 20:22:37 -0400</pubDate><guid>https://parsiya.net/blog/2016-04-02-thick-client-proxying-part-3-burp-options-and-extender/</guid><description>&lt;p>Previous parts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://parsiya.net/blog/2016-03-27-thick-client-proxying-part-1-burp-interception-and-proxy-listeners/" title="Burp Tips and Tricks for Non-Webapp Testing - Part 1: Interception and Proxy Listeners">Burp Tips and Tricks for Non-Webapp Testing - Part 1: Interception and Proxy Listeners&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://parsiya.net/blog/2016-03-29-thick-client-proxying-part-2-burp-history-intruder-scanner-and-more/" title="Burp Tips and Tricks for Non-Webapp Testing - Part 2: History, Intruder, Scanner and More">Burp Tips and Tricks for Non-Webapp Testing - Part 2: History, Intruder, Scanner and More&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Almost there, I will get through &lt;code>Options&lt;/code> and &lt;code>Extender&lt;/code> in this part and we will actually start doing stuff moving forward.&lt;/p></description></item><item><title>Thick Client Proxying - Part 2: Burp History, Intruder, Scanner and More</title><link>https://parsiya.net/blog/2016-03-29-thick-client-proxying-part-2-burp-history-intruder-scanner-and-more/</link><pubDate>Tue, 29 Mar 2016 19:57:53 -0400</pubDate><guid>https://parsiya.net/blog/2016-03-29-thick-client-proxying-part-2-burp-history-intruder-scanner-and-more/</guid><description>&lt;p>In &lt;a href="https://parsiya.net/blog/2016-03-27-thick-client-proxying-part-1-burp-interception-and-proxy-listeners/" title="Burp Tips and Tricks for Non-Webapp Testing - Part 1: Interception and Proxy Listeners">part1&lt;/a> I talked about some of Burp's functionalities with regards to testing non-webapps. I did not expect it to be that long, originally I had intended to just shared some quick tips that I use. Now you are forced to read my drivel.&lt;/p>
&lt;p>In this part I will talk about &lt;code>Target &amp;gt; Scope&lt;/code>, &lt;code>Proxy &amp;gt; HTTP History&lt;/code> and &lt;code>Intruder/Scanner&lt;/code>. I will discuss a bit of &lt;code>Scanner&lt;/code>, &lt;code>Repeater&lt;/code> and &lt;code>Comparer&lt;/code> too, but there is not much to discuss for the last three. They are pretty straightforward.&lt;/p></description></item><item><title>Thick Client Proxying - Part 1: Burp Interception and Proxy Listeners</title><link>https://parsiya.net/blog/2016-03-27-thick-client-proxying-part-1-burp-interception-and-proxy-listeners/</link><pubDate>Sun, 27 Mar 2016 02:45:03 -0400</pubDate><guid>https://parsiya.net/blog/2016-03-27-thick-client-proxying-part-1-burp-interception-and-proxy-listeners/</guid><description>&lt;p>Burp is not just used for web application testing. I usually use it during mobile and thick client tests. If the application is using HTTP methods then Burp is your best friend.&lt;/p>
&lt;p>I am going to document a bunch of Burp tips and tricks that have helped me during my work. One purpose is to share it with the world and not be the other guy from Wham! (:D) and the other is to have it in an accessible place (similar to the cheat sheet in the menu).&lt;/p>
&lt;p>This part one I talk about Interception and Proxy listeners which are configured via &lt;code>Proxy &amp;gt; Options&lt;/code>.&lt;/p>
&lt;p>At the time of writing the current version of Burp Pro is &lt;code>1.6.39&lt;/code> and most items should apply to the current Burp Free version (&lt;code>1.6.32&lt;/code>). Most settings have not changed since I started working with Burp (v1.5). You can download Burp from: &lt;a href="https://portswigger.net/burp/download.html" target="_blank" rel="noreferrer noopener">https://portswigger.net/burp/download.html&lt;/a>.&lt;/p>
&lt;p>When I started this, I did not think I have so much stuff to write about Burp. So I broke it into multiple parts. Please note that these series of posts are not targeted towards web application testing so I have skipped some functionalities. If you have any favorite tips or usecases and want them included with credit please let me know, as usual feedback is always welcome.&lt;/p></description></item><item><title>Installing Burp Certificate Authority in Windows Certificate Store</title><link>https://parsiya.net/blog/2016-02-21-installing-burp-certificate-authority-in-windows-certificate-store/</link><pubDate>Sun, 21 Feb 2016 14:42:41 -0500</pubDate><guid>https://parsiya.net/blog/2016-02-21-installing-burp-certificate-authority-in-windows-certificate-store/</guid><description>&lt;p>I was writing another blog post and I realized that I keep repeating how to do the same things, so I decided to write some tutorial-ish things and just link them.&lt;/p>
&lt;p>Burp uses custom certificates to Man-in-the-Middle (MitM) the traffic. All of these certificates are signed by Burp's root Certificate Authority (CA). Each installation of Burp generates its own root CA that needs to be installed in the browser or Operating System's certificate store to be recognized properly. Otherwise browsers will return warnings and some thick client applications will not recognize these certificates as valid.&lt;/p>
&lt;p>Each installation of Burp generates its own root CA so it is unlikely that others can gain access to it and sign certificates to MitM your connection. To get the certificate's private key, the attackers need to get to your local machine and if so they have better ways to look at your traffic anyway.&lt;/p>
&lt;p>Alternate instructions by Portswigger: &lt;a href="https://support.portswigger.net/customer/en/portal/articles/1783075-installing-burp-s-ca-certificate-in-your-browser" target="_blank" rel="noreferrer noopener">https://support.portswigger.net/customer/en/portal/articles/1783075-installing-burp-s-ca-certificate-in-your-browser&lt;/a>&lt;/p>
&lt;p>For instructions on installing/removing Burp's CA in other browsers and devices please use Portswigger's website: &lt;a href="https://support.portswigger.net/customer/en/portal/articles/1783075-installing-burp-s-ca-certificate-in-your-browser" target="_blank" rel="noreferrer noopener">https://support.portswigger.net/customer/en/portal/articles/1783075-installing-burp-s-ca-certificate-in-your-browser&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: These instructions are for Burp version 1.6.37 Pro and 1.6.32 Free. As long as I remember (v1.5) these instructions have not changed, although they may change in the future but I really doubt it.&lt;/p></description></item><item><title>Piping SSL/TLS Traffic from SoapUI to Burp</title><link>https://parsiya.net/blog/2014-06-25-piping-ssl/tls-traffic-from-soapui-to-burp/</link><pubDate>Wed, 25 Jun 2014 22:04:53 +0000</pubDate><guid>https://parsiya.net/blog/2014-06-25-piping-ssl/tls-traffic-from-soapui-to-burp/</guid><description>&lt;p>Recently I was trying to test a web service. The traffic was over SSL/TLS and everything was fine. As I am better with Burp than SoapUI, I wanted to use Burp as a proxy for SoapUI. This should be an easy matter. Burp will create a custom certificate (signed by its root CA) for each site and effectively Man-in-the-Middle the connection. But this time it was different, I was getting the dreaded &lt;code>Peer not Authenticated&lt;/code> error. This meant that SoapUI did not recognize Burp's custom certificate.&lt;/p></description></item></channel></rss>