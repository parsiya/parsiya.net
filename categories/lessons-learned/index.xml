<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lessons Learned on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/categories/lessons-learned/</link><description>Recent content in Lessons Learned on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 28 Oct 2018 11:31:34 -0400</lastBuildDate><atom:link href="https://parsiya.net/categories/lessons-learned/index.xml" rel="self" type="application/rss+xml"/><item><title>Blackfriday's Parser and Generating graphs with gographviz</title><link>https://parsiya.net/blog/2018-10-28-blackfridays-parser-and-generating-graphs-with-gographviz/</link><pubDate>Sun, 28 Oct 2018 11:31:34 -0400</pubDate><guid>https://parsiya.net/blog/2018-10-28-blackfridays-parser-and-generating-graphs-with-gographviz/</guid><description>&lt;p>I have been working on a personal automation project. In short, I write most of my notes in markdown so I wanted to grab them and store them in a specific format with annotations (e.g. everything under heading &lt;code>deployment notes&lt;/code> is labeled as such in the final data file). These are not high volume, large files. I have written them manually, I am talking about a 10-20 KB file (with most content being pasted code/request snippets). I am not looking for efficiency.&lt;/p>
&lt;p>&lt;a href="https://godoc.org/gopkg.in/russross/blackfriday.v2" target="_blank" rel="noreferrer noopener">Blackfriday&lt;/a> is the markdown parser for &lt;a href="https://github.com/gohugoio/hugo" target="_blank" rel="noreferrer noopener">Hugo&lt;/a>, so I was somewhat familiar with it. Since version 2, it has a markdown parser.&lt;/p>
&lt;p>In this post, I am going to describe what I learned during the process and how I leveraged Blackfriday's markdown parser in some hacky ways to get annotated data. To visualize the AST (Abstract Syntax Tree) generated by Blackfriday, I used &lt;a href="https://github.com/awalterschulze/gographviz" target="_blank" rel="noreferrer noopener">gographviz&lt;/a>.&lt;/p>
&lt;p>A simple package &lt;code>parse&lt;/code> and code can be found here:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/markdown-parsing" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/markdown-parsing&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Gophercises - Lessons Learned</title><link>https://parsiya.net/blog/2018-10-06-gophercises-lessons-learned/</link><pubDate>Sat, 06 Oct 2018 00:22:58 -0400</pubDate><guid>https://parsiya.net/blog/2018-10-06-gophercises-lessons-learned/</guid><description>&lt;p>I recently finished &lt;a href="https://gophercises.com" target="_blank" rel="noreferrer noopener">Gophercises&lt;/a>, a great set of Go practice lessons by &lt;a href="https://www.calhoun.io/" target="_blank" rel="noreferrer noopener">Jon Calhoun&lt;/a>. I think it took me around a month from start to finish with some stuff in the middle. Most were nice, some were tedious. For example, the last exercise was about &lt;a href="https://gophercises.com/exercises/pdf" target="_blank" rel="noreferrer noopener">PDF generation&lt;/a> and went to boring quickly.&lt;/p>
&lt;p>After every lesson, I wrote down &amp;quot;Lessons Learned&amp;quot; in the README. This page collects most of them. All code is here:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/gophercises" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/gophercises&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>