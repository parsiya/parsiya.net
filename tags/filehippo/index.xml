<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FileHippo on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/tags/filehippo/</link><description>Recent content in FileHippo on Hackerman's Hacking Tutorials</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 May 2016 16:55:24 -0400</lastBuildDate><atom:link href="https://parsiya.net/tags/filehippo/index.xml" rel="self" type="application/rss+xml"/><item><title>Thick Client Proxying - Part 5: FileHippo App Manager or the Bloated Hippo</title><link>https://parsiya.net/blog/2016-05-15-thick-client-proxying-part-5-filehippo-app-manager-or-the-bloated-hippo/</link><pubDate>Sun, 15 May 2016 16:55:24 -0400</pubDate><guid>https://parsiya.net/blog/2016-05-15-thick-client-proxying-part-5-filehippo-app-manager-or-the-bloated-hippo/</guid><description>&lt;p>I have talked a lot about this and that but have done nothing in action. Now I will talk about proxying actual applications. I will start with something easy, the &lt;a href="http://filehippo.com/download_app_manager/" target="_blank" rel="noreferrer noopener">FileHippo App Manager&lt;/a>. This app was chosen because it can be proxied with Burp, it does not use TLS and it has its own proxy settings (also works with Internet Explorer proxy settings). The requests are pretty simple to understand. I like the FileHippo website because it archives old versions of software. For example I loved the non-bloated Yahoo! Messenger 8.0 when I used it (it's pretty popular in some places) and used FileHippo to download the old versions.&lt;/p>
&lt;p>FileHippo App Manager turned out to be more interesting than I thought and this post turned into some .NET reverse engineering using dnSpy. Here's what I talk about in this post:&lt;/p>
&lt;ul>
&lt;li>The app contains the AWS SDK and a fortunately invalid set of AWS Access/Secret keys. Both the SDK and the keys are in dead code.&lt;/li>
&lt;li>Requests have an &lt;code>AccessToken&lt;/code> header which is generated client-side. We will discuss how it is generated.&lt;/li>
&lt;li>The application has a &amp;quot;hidden&amp;quot; DEBUG mode which unfortunately does nothing special. We will discover how to enable it.&lt;/li>
&lt;/ul></description></item></channel></rss>