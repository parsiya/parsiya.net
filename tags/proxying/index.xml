<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Proxying on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/tags/proxying/</link><description>Recent content in Proxying on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 28 Jul 2016 02:04:23 -0400</lastBuildDate><atom:link href="https://parsiya.net/tags/proxying/index.xml" rel="self" type="application/rss+xml"/><item><title>Thick Client Proxying - Part 6: How HTTP(s) Proxies Work</title><link>https://parsiya.net/blog/2016-07-28-thick-client-proxying-part-6-how-https-proxies-work/</link><pubDate>Thu, 28 Jul 2016 02:04:23 -0400</pubDate><guid>https://parsiya.net/blog/2016-07-28-thick-client-proxying-part-6-how-https-proxies-work/</guid><description>&lt;p>In order to create our own custom proxies, first we need to know how proxies work. When I wanted to write a custom proxy tool (it's a simple Python script) in &lt;a href="https://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/" title="Proxying Hipchat Part 3: SSL Added and Removed Here">Hipchat part3&lt;/a>, I had to go back and learn how they work. I did not find such a resource online that looked at proxies from an infosec perspective. Most talked about how to configure caching or forwarding proxies and not much about MitM ones. I have briefly talked about it in the section 2 of the same post named &lt;code>How does a Proxy Work?&lt;/code>. In this post I am going to take a deep(er) dive. I actually read some RFCs and they were surprisingly well written.&lt;/p>
&lt;p>If you want to skip the intro, go to &lt;a href="#section-3" title="How HTTP Proxies Work">section 3&lt;/a>.&lt;/p></description></item><item><title>Windows Netsh Interface Portproxy</title><link>https://parsiya.net/blog/2016-06-07-windows-netsh-interface-portproxy/</link><pubDate>Tue, 07 Jun 2016 22:29:49 -0400</pubDate><guid>https://parsiya.net/blog/2016-06-07-windows-netsh-interface-portproxy/</guid><description>&lt;p>I thought I had found the Windows &lt;code>iptables&lt;/code> with &lt;a href="https://technet.microsoft.com/de-de/library/cc731068%28v=ws.10%29.aspx" target="_blank" rel="noreferrer noopener">Portproxy&lt;/a>
but I was wrong. But I learned something neat in the process and I am
documenting it.&lt;/p>
&lt;p>Portproxy allows you to listen on a certain port on one of your network
interfaces (or all interfaces) and redirect all traffic
&lt;strong>destined to that interface&lt;/strong> to another port/IP.&lt;/p>
&lt;p>The &lt;code>to that interface&lt;/code> is the limitation that unfortunately kills it. This will
be a short post.&lt;/p></description></item><item><title>Proxying Hipchat Part 3: SSL Added and Removed Here :^)</title><link>https://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/</link><pubDate>Mon, 19 Oct 2015 21:42:10 +0000</pubDate><guid>https://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/</guid><description>&lt;p>Finally we are at part 3 of proxying Hipchat. This has been quite the adventure. In &lt;a href="https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/" title="Proxying Hipchat Part 1: Where did the Traffic Go?">&lt;strong>part1&lt;/strong>&lt;/a> we identified the endpoints. In &lt;a href="https://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/" title="Proxying Hipchat Part 2: So You Think You Can Use Burp?">&lt;strong>part2&lt;/strong>&lt;/a> we answered the question “So you think you can use Burp” with yes and proxied some of Hipchat's traffic with Burp.&lt;/p>
&lt;p>In this part we will talk about developing our own proxy in Python to view Hipchat's traffic to/form &lt;code>hipchatserver.com&lt;/code> (our example Hipchat server). First we are going to discuss how proxies work and we will get over Burp breaking our heart by creating our own proxy in Python to observe and dump the traffic in plaintext.&lt;/p>
&lt;p>Related (crappy) code is at now in my clone at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/hipchat-proxy" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/hipchat-proxy&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For a similar effort (although with a much more complex proxy in &lt;code>erlang&lt;/code>) look at &lt;a href="http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/" target="_blank" rel="noreferrer noopener">http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/&lt;/a>.&lt;/p></description></item><item><title>Proxying Hipchat Part 2: So You Think You Can Use Burp?</title><link>https://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/</link><pubDate>Fri, 09 Oct 2015 22:34:37 +0000</pubDate><guid>https://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/</guid><description>&lt;p>In &lt;a href="https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/" title="Proxying Hipchat Part 1: Where did the Traffic Go?">&lt;strong>part1&lt;/strong>&lt;/a> I talked about identifying Hipchat endpoints and promised to discuss proxying the application. In this post I will show how to proxy &lt;em>some&lt;/em> of Hipchat's traffic using Burp.&lt;/p>
&lt;p>This is specific to Hipchat client for Windows. The current version at the time of writing was is &lt;strong>2.2.1361&lt;/strong>. Atlassian is skipping version 3 and version 4 still in beta.&lt;/p></description></item><item><title>Proxying Hipchat Part 1: Where did the Traffic Go?</title><link>https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/</link><pubDate>Thu, 08 Oct 2015 23:05:24 +0000</pubDate><guid>https://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/</guid><description>&lt;p>This is a slightly different version of a series of blog post that I wrote on our internal blog about proxying. I see that proxying traffic is a time consuming step in testing thick client applications so I thought I would share what I know. I tackled Hipchat. Why Hipchat? Because it uses a known protocol (XMPP) and I thought it's an interesting application.&lt;/p>
&lt;p>I used Hipchat Windows client version 2. At the time of writing version 4 is in beta. In this part we will see how we can identify endpoints from traffic captures even when they are behind a load balancer/shared hosting etc. In next parts we will start proxying.&lt;/p></description></item></channel></rss>