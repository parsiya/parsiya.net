<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Proxy on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/tags/proxy/</link><description>Recent content in Proxy on Hackerman's Hacking Tutorials</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Sep 2017 22:45:20 -0400</lastBuildDate><atom:link href="https://parsiya.net/tags/proxy/index.xml" rel="self" type="application/rss+xml"/><item><title>Razer Comms</title><link>https://parsiya.net/blog/2017-09-21-razer-comms/</link><pubDate>Thu, 21 Sep 2017 22:45:20 -0400</pubDate><guid>https://parsiya.net/blog/2017-09-21-razer-comms/</guid><description>&lt;p>A couple of years ago I looked at Razer Comms. I found a bunch of stuff that I never reported or pursued. I discovered the application is &lt;a href="http://support.razerzone.com/software/comms" target="_blank" rel="noreferrer noopener">now retired&lt;/a> so I am publishing these.&lt;/p>
&lt;p>I did not look very hard but Razer Comms was essentially a webapp running via the &lt;a href="https://bitbucket.org/chromiumembedded/cef" target="_blank" rel="noreferrer noopener">Chromium Embedded Framework&lt;/a>. There were no checks on channel authorizations. You could read every channel including ones protected with passwords.&lt;/p>
&lt;p>You can see my notes at &lt;a href="https://github.com/parsiya/Parsia-Clone/tree/master/research/razer-comms" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Clone/tree/master/research/razer-comms&lt;/a>.&lt;/p></description></item><item><title>Piping SSL/TLS Traffic from SoapUI to Burp</title><link>https://parsiya.net/blog/2014-06-25-piping-ssl/tls-traffic-from-soapui-to-burp/</link><pubDate>Wed, 25 Jun 2014 22:04:53 +0000</pubDate><guid>https://parsiya.net/blog/2014-06-25-piping-ssl/tls-traffic-from-soapui-to-burp/</guid><description>Recently I was trying to test a web service. The traffic was over SSL/TLS and everything was fine. As I am better with Burp than SoapUI, I wanted to use Burp as a proxy for SoapUI. This should be an easy matter. Burp will create a custom certificate (signed by its root CA) for each site and effectively Man-in-the-Middle the connection. But this time it was different, I was getting the dreaded Peer not Authenticated error.</description></item></channel></rss>