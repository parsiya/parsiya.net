<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interactive Debugging on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/tags/interactive-debugging/</link><description>Recent content in Interactive Debugging on Hackerman's Hacking Tutorials</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 May 2014 18:39:58 +0000</lastBuildDate><atom:link href="https://parsiya.net/tags/interactive-debugging/index.xml" rel="self" type="application/rss+xml"/><item><title>Pasting Shellcode in GDB using Python</title><link>https://parsiya.net/blog/2014-05-25-pasting-shellcode-in-gdb-using-python/</link><pubDate>Sun, 25 May 2014 18:39:58 +0000</pubDate><guid>https://parsiya.net/blog/2014-05-25-pasting-shellcode-in-gdb-using-python/</guid><description>A few days ago I was trying to write an exploit for a buffer overflow with GDB. This was a console application and pasting shellcode would mess with it.
There are a few options:
Writing shellcode to a file and then using it as input for GDB. # you can also include GDB commands like setting up breakpoints (e.g. b * 0xDEADBEEF) # remember to include a new line after each command $ python -c &amp;#39;print &amp;#34;b * 0xDEADBEEF&amp;#34; + &amp;#34;\n&amp;#34; + &amp;#34;\x41&amp;#34;*1000 + &amp;#34;\n&amp;#34;&amp;#39; &amp;gt; input # $ perl -e for perl # start debugging with GDB # -q (quiet mode): no text at startup $ gdb executable1 -q (gdb) run &amp;lt; input After this you can manually debug in GDB.</description></item></channel></rss>