<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DnSpy on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/tags/dnspy/</link><description>Recent content in DnSpy on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 29 Jan 2019 22:52:01 -0500</lastBuildDate><atom:link href="https://parsiya.net/tags/dnspy/index.xml" rel="self" type="application/rss+xml"/><item><title>Cheating at Moonlighter - Part 3 - Enabling Debug HUD</title><link>https://parsiya.net/blog/2019-01-29-cheating-at-moonlighter-part-3-enabling-debug-hud/</link><pubDate>Tue, 29 Jan 2019 22:52:01 -0500</pubDate><guid>https://parsiya.net/blog/2019-01-29-cheating-at-moonlighter-part-3-enabling-debug-hud/</guid><description>&lt;p&gt;In this part, I am going to use dnSpy to enable the Debug HUD. We will analyze how it's enabled and how it can be accessed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2019-01-23-cheating-at-moonlighter-part-1-save-file/" title="Cheating at Moonlighter - Part 1 - Save File"&gt;Cheating at Moonlighter - Part 1 - Save File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2019-01-27-cheating-at-moonlighter-part-2-changing-game-logic-with-dnspy/" title="Cheating at Moonlighter - Part 2 - Changing Game Logic with dnSpy"&gt;Cheating at Moonlighter - Part 2 - Changing Game Logic with dnSpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Cheating at Moonlighter - Part 2 - Changing Game Logic with dnSpy</title><link>https://parsiya.net/blog/2019-01-27-cheating-at-moonlighter-part-2-changing-game-logic-with-dnspy/</link><pubDate>Sun, 27 Jan 2019 20:47:30 -0500</pubDate><guid>https://parsiya.net/blog/2019-01-27-cheating-at-moonlighter-part-2-changing-game-logic-with-dnspy/</guid><description>&lt;p&gt;In part 1 we messed a bit with Moonlighter but modifying the save file. In this part, we will modify game logic using dnSpy.&lt;/p&gt;
&lt;p&gt;We will modify our damage, player stats and discover a hidden stat.&lt;/p&gt;</description></item><item><title>DVTA - Part 5 - Client-side Storage and DLL Hijacking</title><link>https://parsiya.net/blog/2018-08-25-dvta-part-5-client-side-storage-and-dll-hijacking/</link><pubDate>Sat, 25 Aug 2018 13:49:10 -0400</pubDate><guid>https://parsiya.net/blog/2018-08-25-dvta-part-5-client-side-storage-and-dll-hijacking/</guid><description>&lt;p&gt;Thick clients store ample information on the device. In this part, we are going to investigate DVTA to see what, how, and where it stores data. We are also going to do some basic DLL hijacking. Our tools are procmon, PowerSploit, and dnSpy.&lt;/p&gt;
&lt;p&gt;Previous parts are at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/" title="DVTA - Part 1 - Setup"&gt;DVTA - Part 1 - Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2018-07-21-dvta-part-2-cert-pinning-and-login-button/" title="DVTA - Part 2 - Cert Pinning and Login Button"&gt;DVTA - Part 2 - Cert Pinning and Login Button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2018-07-30-dvta-part-3-network-recon/" title="DVTA - Part 3 - Network Recon"&gt;DVTA - Part 3 - Network Recon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2018-08-02-dvta-part-4-traffic-tampering-with-dnspy/" title="DVTA - Part 4 - Traffic Tampering with dnSpy"&gt;DVTA - Part 4 - Traffic Tampering with dnSpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>DVTA - Part 4 - Traffic Tampering with dnSpy</title><link>https://parsiya.net/blog/2018-08-02-dvta-part-4-traffic-tampering-with-dnspy/</link><pubDate>Thu, 02 Aug 2018 19:41:54 -0400</pubDate><guid>https://parsiya.net/blog/2018-08-02-dvta-part-4-traffic-tampering-with-dnspy/</guid><description>&lt;p&gt;After doing network recon in part three, it's time to do some traffic manipulation. We will learn how to capture and modify network traffic using dnSpy. This is much easier than trying to intercept and modify traffic after it's transmitted.&lt;/p&gt;
&lt;p&gt;Previous parts are at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/" title="DVTA - Part 1 - Setup"&gt;DVTA - Part 1 - Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2018-07-21-dvta-part-2-cert-pinning-and-login-button/" title="DVTA - Part 2 - Cert Pinning and Login Button"&gt;DVTA - Part 2 - Cert Pinning and Login Button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2018-07-30-dvta-part-3-network-recon/" title="DVTA - Part 3 - Network Recon"&gt;DVTA - Part 3 - Network Recon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>DVTA - Part 2 - Cert Pinning and Login Button</title><link>https://parsiya.net/blog/2018-07-21-dvta-part-2-cert-pinning-and-login-button/</link><pubDate>Sat, 21 Jul 2018 01:38:50 -0400</pubDate><guid>https://parsiya.net/blog/2018-07-21-dvta-part-2-cert-pinning-and-login-button/</guid><description>&lt;p&gt;After setting up the Damn Vulnerable Thick Client Application, we are now ready to hack it.&lt;/p&gt;
&lt;p&gt;In this section, we will bypass the certificate pinning, enable the login button, learn how to modify the code in dnSpy through writing C# code and get a quick intro to Common Intermediate Language (CIL).&lt;/p&gt;
&lt;p&gt;You can see previous parts here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/" title="DVTA - Part 1 - Setup"&gt;Damn Vulnerable Thick Client Application - Part 1 - Setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>DVTA - Part 1 - Setup</title><link>https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/</link><pubDate>Sun, 15 Jul 2018 21:26:41 -0400</pubDate><guid>https://parsiya.net/blog/2018-07-15-dvta-part-1-setup/</guid><description>&lt;p&gt;I have written a lot about thick clients. However, I have not done more than a few practical examples that I can show my co-workers or anyone else asking questions. Recently, I came across the Damn Vulnerable Thick Client Application by SecVulture at &lt;a href="https://github.com/secvulture/dvta" target="_blank" rel="noreferrer noopener"&gt;https://github.com/secvulture/dvta&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am not going to use the original version of the application. Someone has created a fork and added more protections. We will use this fork instead:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nddmars/dvta" target="_blank" rel="noreferrer noopener"&gt;https://github.com/nddmars/dvta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neither fork's setup instructions worked for me. As a result, the first part is actually setting up the application and the necessary back-end in only one VM. But don't worry, we will do a bit of reverse engineering with dnSpy to fix an issue.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to SecVulture for creating the app and maintainers of the second repository for adding protections.&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Thick Client Proxying - Part 5: FileHippo App Manager or the Bloated Hippo</title><link>https://parsiya.net/blog/2016-05-15-thick-client-proxying-part-5-filehippo-app-manager-or-the-bloated-hippo/</link><pubDate>Sun, 15 May 2016 16:55:24 -0400</pubDate><guid>https://parsiya.net/blog/2016-05-15-thick-client-proxying-part-5-filehippo-app-manager-or-the-bloated-hippo/</guid><description>&lt;p&gt;I have talked a lot about this and that but have done nothing in action. Now I will talk about proxying actual applications. I will start with something easy, the &lt;a href="http://filehippo.com/download_app_manager/" target="_blank" rel="noreferrer noopener"&gt;FileHippo App Manager&lt;/a&gt;. This app was chosen because it can be proxied with Burp, it does not use TLS and it has its own proxy settings (also works with Internet Explorer proxy settings). The requests are pretty simple to understand. I like the FileHippo website because it archives old versions of software. For example I loved the non-bloated Yahoo! Messenger 8.0 when I used it (it's pretty popular in some places) and used FileHippo to download the old versions.&lt;/p&gt;
&lt;p&gt;FileHippo App Manager turned out to be more interesting than I thought and this post turned into some .NET reverse engineering using dnSpy. Here's what I talk about in this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The app contains the AWS SDK and a fortunately invalid set of AWS Access/Secret keys. Both the SDK and the keys are in dead code.&lt;/li&gt;
&lt;li&gt;Requests have an &lt;code&gt;AccessToken&lt;/code&gt; header which is generated client-side. We will discuss how it is generated.&lt;/li&gt;
&lt;li&gt;The application has a &amp;quot;hidden&amp;quot; DEBUG mode which unfortunately does nothing special. We will discover how to enable it.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Intro to .NET Remoting for Hackers</title><link>https://parsiya.net/blog/2015-11-14-intro-to-.net-remoting-for-hackers/</link><pubDate>Sat, 14 Nov 2015 16:22:36 +0000</pubDate><guid>https://parsiya.net/blog/2015-11-14-intro-to-.net-remoting-for-hackers/</guid><description>&lt;p&gt;This is a simple tutorial about &lt;a href="https://msdn.microsoft.com/en-us/library/kwdt6w2k%28v=vs.71%29.aspx" target="_blank" rel="noreferrer noopener"&gt;.NET Remoting&lt;/a&gt;. I am going to re-create a very simple RCE and local privilege escalation that I encountered in my projects and use it to explain .NET Remoting and simple debugging in &lt;code&gt;dnSpy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this post we will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do a brief introduction to .NET Remoting&lt;/li&gt;
&lt;li&gt;Develop a simple .NET Remoting client and a vulnerable server in Visual Studio&lt;/li&gt;
&lt;li&gt;Observe .NET Remoting traffic&lt;/li&gt;
&lt;li&gt;See .NET Remoting in action by doing some basic debugging with dnSpy&lt;/li&gt;
&lt;li&gt;Re-create the vulnerable application&lt;/li&gt;
&lt;li&gt;Use dnSpy to patch and create modified .NET modules to exploit our sample vulnerable server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you know of any applications that use .NET Remoting please let me know. I want to look at them.&lt;/p&gt;
&lt;p&gt;Code is at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/net-remoting" target="_blank" rel="noreferrer noopener"&gt;https://github.com/parsiya/Parsia-Code/tree/master/net-remoting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>