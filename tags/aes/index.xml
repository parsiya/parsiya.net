<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AES on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/tags/aes/</link><description>Recent content in AES on Hackerman's Hacking Tutorials</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 24 Dec 2018 01:00:14 -0500</lastBuildDate><atom:link href="https://parsiya.net/tags/aes/index.xml" rel="self" type="application/rss+xml"/><item><title>Cryptography in Python Burp Extensions</title><link>https://parsiya.net/blog/2018-12-24-cryptography-in-python-burp-extensions/</link><pubDate>Mon, 24 Dec 2018 01:00:14 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-24-cryptography-in-python-burp-extensions/</guid><description>&lt;p>In this post, I will discuss a few tricks for creating Burp extensions in Python that deal with cryptography. Our example is a Burp extension that adds a new tab to decode and decrypt an application's traffic. This allows us to modify payloads on the fly and take advantage of Repeater (and other tabs). I have used similar extensions when testing mobile and thickclient applications.&lt;/p>
&lt;p>The code is at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/parsiya/Parsia-Code/tree/master/python-burp-crypto" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Parsia-Code/tree/master/python-burp-crypto&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>AES-CFB128: PyCrypto vs. Go</title><link>https://parsiya.net/blog/2018-12-22-aes-cfb128-pycrypto-vs.-go/</link><pubDate>Sat, 22 Dec 2018 19:25:10 -0500</pubDate><guid>https://parsiya.net/blog/2018-12-22-aes-cfb128-pycrypto-vs.-go/</guid><description>&lt;p>We have encrypted something with AES-CFB128 in Go. How can we decrypt it with PyCrypto?&lt;/p>
&lt;p>This was originally part of the next blog post (about creating Python Burp extensions) but it grew large enough to be a separate post.&lt;/p>
&lt;p>Disclaimer: I am not knowledgeable enough to explain cryptography to people. Read actual papers/books/articles to figure things out. If you find mistakes here, please let me know.&lt;/p>
&lt;p>Code is at: &lt;a href="https://github.com/parsiya/Go-Security/tree/master/aes-cfb128" target="_blank" rel="noreferrer noopener">https://github.com/parsiya/Go-Security/tree/master/aes-cfb128&lt;/a>&lt;/p></description></item><item><title>Tales from the Crypt(o) - Leaking AES Keys</title><link>https://parsiya.net/blog/2015-01-06-tales-from-the-crypto-leaking-aes-keys/</link><pubDate>Tue, 06 Jan 2015 23:36:48 +0000</pubDate><guid>https://parsiya.net/blog/2015-01-06-tales-from-the-crypto-leaking-aes-keys/</guid><description>&lt;p>This post is part one of a two part internal blog entry on creating a Pintool for an assessment. Unfortunately I cannot talk about it, so I decided to put the first part out. If I find an opensource program similar to the assessment I will try and recreate the tool (but I am not holding my breath). As this part is essentially a build up, it may not be coherent at times. Alteratively, if you really want to read it, you can join us. We are almost always hiring (let me do the referral though ;).&lt;/p>
&lt;p>Today we are going to talk about discovering encryption keys in sneaky ways. We will start with simple examples, do a bit of Digital Forensics or DF (for low standards of DF) and finally in part two we will use our recently acquired knowledge of Pintool to do &lt;code>[redacted]&lt;/code>.&lt;/p>
&lt;p>First let's talk a bit about the inner-workings of AES decryption. By inner-workings of AES I do not mean the following diagrams that you have seen so many times.&lt;/p></description></item><item><title>How do I TLS Ciphersuite?</title><link>https://parsiya.net/blog/2013-11-17-how-do-i-tls-ciphersuite/</link><pubDate>Sun, 17 Nov 2013 00:00:00 +0000</pubDate><guid>https://parsiya.net/blog/2013-11-17-how-do-i-tls-ciphersuite/</guid><description>&lt;p>“Should we use RC4 or AES-CBC ?”
This is a legitimate question. Many have heard of the highly publicized attacks against AES-CBC (CRIME, BEAST etc) and lean towards RC4.
If asked (granted no one asks me), my answer would be: If you can control web servers (not feasible in all situations) and users' browsers
(almost impossible), upgrade to TLS 1.2 and go with AES-GCM. However, not many browsers supported these and to be honest, more users trumps loss
of security in many cases.&lt;/p></description></item></channel></rss>