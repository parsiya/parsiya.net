<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Encryption on Hackerman's Hacking Tutorials</title><link>https://parsiya.net/tags/encryption/</link><description>Recent content in Encryption on Hackerman's Hacking Tutorials</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 06 Jan 2015 23:36:48 +0000</lastBuildDate><atom:link href="https://parsiya.net/tags/encryption/index.xml" rel="self" type="application/rss+xml"/><item><title>Tales from the Crypt(o) - Leaking AES Keys</title><link>https://parsiya.net/blog/2015-01-06-tales-from-the-crypto-leaking-aes-keys/</link><pubDate>Tue, 06 Jan 2015 23:36:48 +0000</pubDate><guid>https://parsiya.net/blog/2015-01-06-tales-from-the-crypto-leaking-aes-keys/</guid><description>&lt;p&gt;This post is part one of a two part internal blog entry on creating a Pintool for an assessment. Unfortunately I cannot talk about it, so I decided to put the first part out. If I find an opensource program similar to the assessment I will try and recreate the tool (but I am not holding my breath). As this part is essentially a build up, it may not be coherent at times. Alteratively, if you really want to read it, you can join us. We are almost always hiring (let me do the referral though ;).&lt;/p&gt;
&lt;p&gt;Today we are going to talk about discovering encryption keys in sneaky ways. We will start with simple examples, do a bit of Digital Forensics or DF (for low standards of DF) and finally in part two we will use our recently acquired knowledge of Pintool to do &lt;code&gt;[redacted]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First let's talk a bit about the inner-workings of AES decryption. By inner-workings of AES I do not mean the following diagrams that you have seen so many times.&lt;/p&gt;</description></item><item><title>Apple's Common Crypto Library Defaults to a Zero IV if One is not Provided</title><link>https://parsiya.net/blog/2014-07-03-apples-common-crypto-library-defaults-to-a-zero-iv-if-one-is-not-provided/</link><pubDate>Thu, 03 Jul 2014 01:30:18 +0000</pubDate><guid>https://parsiya.net/blog/2014-07-03-apples-common-crypto-library-defaults-to-a-zero-iv-if-one-is-not-provided/</guid><description>&lt;p&gt;Today I was writing some guidelines about generating keys for mobile applications at work. While providing code examples in Java and Obj-C for AES encryption I happened to look at Apple's [Common Crypto] &lt;a href="http://opensource.apple.com/source/CommonCrypto/CommonCrypto-60049/lib/" target="_blank" rel="noreferrer noopener"&gt;CCLink&lt;/a&gt; library . While going through the source code for [CommonCryptor.c] &lt;a href="http://opensource.apple.com/source/CommonCrypto/CommonCrypto-60049/lib/CommonCryptor.c" target="_blank" rel="noreferrer noopener"&gt;CCLink2&lt;/a&gt;, I noticed that IV is commented as &lt;code&gt;/* optional initialization vector */&lt;/code&gt;. This makes sense because not all ciphers use IV and not all AES modes of operation (e.g. ECB mode). However; if an IV is not provided, the library will default to a zero IV.&lt;/p&gt;</description></item></channel></rss>